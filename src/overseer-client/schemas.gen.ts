// This file is auto-generated by @hey-api/openapi-ts

export const $User = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            example: 1,
            readOnly: true
        },
        email: {
            type: 'string',
            example: 'hey@itsme.com',
            readOnly: true
        },
        username: {
            type: 'string'
        },
        plexToken: {
            type: 'string',
            readOnly: true
        },
        plexUsername: {
            type: 'string',
            readOnly: true
        },
        userType: {
            type: 'integer',
            example: 1,
            readOnly: true
        },
        permissions: {
            type: 'number',
            example: 0
        },
        avatar: {
            type: 'string',
            readOnly: true
        },
        createdAt: {
            type: 'string',
            example: '2020-09-02T05:02:23.000Z',
            readOnly: true
        },
        updatedAt: {
            type: 'string',
            example: '2020-09-02T05:02:23.000Z',
            readOnly: true
        },
        requestCount: {
            type: 'number',
            example: 5,
            readOnly: true
        }
    },
    required: ['id', 'email', 'createdAt', 'updatedAt']
} as const;

export const $UserSettings = {
    type: 'object',
    properties: {
        locale: {
            type: 'string'
        },
        region: {
            type: 'string'
        },
        originalLanguage: {
            type: 'string'
        }
    }
} as const;

export const $MainSettings = {
    type: 'object',
    properties: {
        apiKey: {
            type: 'string',
            readOnly: true
        },
        appLanguage: {
            type: 'string',
            example: 'en'
        },
        applicationTitle: {
            type: 'string',
            example: 'Overseerr'
        },
        applicationUrl: {
            type: 'string',
            example: 'https://os.example.com'
        },
        trustProxy: {
            type: 'boolean',
            example: true
        },
        csrfProtection: {
            type: 'boolean',
            example: false
        },
        hideAvailable: {
            type: 'boolean',
            example: false
        },
        partialRequestsEnabled: {
            type: 'boolean',
            example: false
        },
        localLogin: {
            type: 'boolean',
            example: true
        },
        newPlexLogin: {
            type: 'boolean',
            example: true
        },
        defaultPermissions: {
            type: 'number',
            example: 32
        }
    }
} as const;

export const $PlexLibrary = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string',
            example: 'Movies'
        },
        enabled: {
            type: 'boolean',
            example: false
        }
    },
    required: ['id', 'name', 'enabled']
} as const;

export const $PlexSettings = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Main Server',
            readOnly: true
        },
        machineId: {
            type: 'string',
            example: '1234123412341234',
            readOnly: true
        },
        ip: {
            type: 'string',
            example: '127.0.0.1'
        },
        port: {
            type: 'number',
            example: 32400
        },
        useSsl: {
            type: 'boolean',
            nullable: true
        },
        libraries: {
            type: 'array',
            readOnly: true,
            items: {
                '$ref': '#/components/schemas/PlexLibrary'
            }
        },
        webAppUrl: {
            type: 'string',
            nullable: true,
            example: 'https://app.plex.tv/desktop'
        }
    },
    required: ['name', 'machineId', 'ip', 'port']
} as const;

export const $PlexConnection = {
    type: 'object',
    properties: {
        protocol: {
            type: 'string',
            example: 'https'
        },
        address: {
            type: 'string',
            example: '127.0.0.1'
        },
        port: {
            type: 'number',
            example: 32400
        },
        uri: {
            type: 'string',
            example: 'https://127-0-0-1.2ab6ce1a093d465e910def96cf4e4799.plex.direct:32400'
        },
        local: {
            type: 'boolean',
            example: true
        },
        status: {
            type: 'number',
            example: 200
        },
        message: {
            type: 'string',
            example: 'OK'
        }
    },
    required: ['protocol', 'address', 'port', 'uri', 'local']
} as const;

export const $PlexDevice = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'My Plex Server'
        },
        product: {
            type: 'string',
            example: 'Plex Media Server'
        },
        productVersion: {
            type: 'string',
            example: '1.21'
        },
        platform: {
            type: 'string',
            example: 'Linux'
        },
        platformVersion: {
            type: 'string',
            example: 'default/linux/amd64/17.1/systemd'
        },
        device: {
            type: 'string',
            example: 'PC'
        },
        clientIdentifier: {
            type: 'string',
            example: '85a943ce-a0cc-4d2a-a4ec-f74f06e40feb'
        },
        createdAt: {
            type: 'string',
            example: '2021-01-01T00:00:00.000Z'
        },
        lastSeenAt: {
            type: 'string',
            example: '2021-01-01T00:00:00.000Z'
        },
        provides: {
            type: 'array',
            items: {
                type: 'string',
                example: 'server'
            }
        },
        owned: {
            type: 'boolean',
            example: true
        },
        ownerID: {
            type: 'string',
            example: '12345'
        },
        home: {
            type: 'boolean',
            example: true
        },
        sourceTitle: {
            type: 'string',
            example: 'xyzabc'
        },
        accessToken: {
            type: 'string',
            example: 'supersecretaccesstoken'
        },
        publicAddress: {
            type: 'string',
            example: '127.0.0.1'
        },
        httpsRequired: {
            type: 'boolean',
            example: true
        },
        synced: {
            type: 'boolean',
            example: true
        },
        relay: {
            type: 'boolean',
            example: true
        },
        dnsRebindingProtection: {
            type: 'boolean',
            example: false
        },
        natLoopbackSupported: {
            type: 'boolean',
            example: false
        },
        publicAddressMatches: {
            type: 'boolean',
            example: false
        },
        presence: {
            type: 'boolean',
            example: true
        },
        connection: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PlexConnection'
            }
        }
    },
    required: ['name', 'product', 'productVersion', 'platform', 'device', 'clientIdentifier', 'createdAt', 'lastSeenAt', 'provides', 'owned', 'connection']
} as const;

export const $TautulliSettings = {
    type: 'object',
    properties: {
        hostname: {
            type: 'string',
            nullable: true,
            example: 'tautulli.example.com'
        },
        port: {
            type: 'number',
            nullable: true,
            example: 8181
        },
        useSsl: {
            type: 'boolean',
            nullable: true
        },
        apiKey: {
            type: 'string',
            nullable: true
        },
        externalUrl: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $RadarrSettings = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 0,
            readOnly: true
        },
        name: {
            type: 'string',
            example: 'Radarr Main'
        },
        hostname: {
            type: 'string',
            example: '127.0.0.1'
        },
        port: {
            type: 'number',
            example: 7878
        },
        apiKey: {
            type: 'string',
            example: 'exampleapikey'
        },
        useSsl: {
            type: 'boolean',
            example: false
        },
        baseUrl: {
            type: 'string'
        },
        activeProfileId: {
            type: 'number',
            example: 1
        },
        activeProfileName: {
            type: 'string',
            example: '720p/1080p'
        },
        activeDirectory: {
            type: 'string',
            example: '/movies'
        },
        is4k: {
            type: 'boolean',
            example: false
        },
        minimumAvailability: {
            type: 'string',
            example: 'In Cinema'
        },
        isDefault: {
            type: 'boolean',
            example: false
        },
        externalUrl: {
            type: 'string',
            example: 'http://radarr.example.com'
        },
        syncEnabled: {
            type: 'boolean',
            example: false
        },
        preventSearch: {
            type: 'boolean',
            example: false
        }
    },
    required: ['name', 'hostname', 'port', 'apiKey', 'useSsl', 'activeProfileId', 'activeProfileName', 'activeDirectory', 'is4k', 'minimumAvailability', 'isDefault']
} as const;

export const $SonarrSettings = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 0,
            readOnly: true
        },
        name: {
            type: 'string',
            example: 'Sonarr Main'
        },
        hostname: {
            type: 'string',
            example: '127.0.0.1'
        },
        port: {
            type: 'number',
            example: 8989
        },
        apiKey: {
            type: 'string',
            example: 'exampleapikey'
        },
        useSsl: {
            type: 'boolean',
            example: false
        },
        baseUrl: {
            type: 'string'
        },
        activeProfileId: {
            type: 'number',
            example: 1
        },
        activeProfileName: {
            type: 'string',
            example: '720p/1080p'
        },
        activeDirectory: {
            type: 'string',
            example: '/tv/'
        },
        activeLanguageProfileId: {
            type: 'number',
            example: 1
        },
        activeAnimeProfileId: {
            type: 'number',
            nullable: true
        },
        activeAnimeLanguageProfileId: {
            type: 'number',
            nullable: true
        },
        activeAnimeProfileName: {
            type: 'string',
            example: '720p/1080p',
            nullable: true
        },
        activeAnimeDirectory: {
            type: 'string',
            nullable: true
        },
        is4k: {
            type: 'boolean',
            example: false
        },
        enableSeasonFolders: {
            type: 'boolean',
            example: false
        },
        isDefault: {
            type: 'boolean',
            example: false
        },
        externalUrl: {
            type: 'string',
            example: 'http://radarr.example.com'
        },
        syncEnabled: {
            type: 'boolean',
            example: false
        },
        preventSearch: {
            type: 'boolean',
            example: false
        }
    },
    required: ['name', 'hostname', 'port', 'apiKey', 'useSsl', 'activeProfileId', 'activeProfileName', 'activeDirectory', 'is4k', 'enableSeasonFolders', 'isDefault']
} as const;

export const $ServarrTag = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        label: {
            type: 'string',
            example: 'A Label'
        }
    }
} as const;

export const $PublicSettings = {
    type: 'object',
    properties: {
        initialized: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $MovieResult = {
    type: 'object',
    required: ['id', 'mediaType', 'title'],
    properties: {
        id: {
            type: 'number',
            example: 1234
        },
        mediaType: {
            type: 'string'
        },
        popularity: {
            type: 'number',
            example: 10
        },
        posterPath: {
            type: 'string'
        },
        backdropPath: {
            type: 'string'
        },
        voteCount: {
            type: 'number'
        },
        voteAverage: {
            type: 'number'
        },
        genreIds: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        overview: {
            type: 'string',
            example: 'Overview of the movie'
        },
        originalLanguage: {
            type: 'string',
            example: 'en'
        },
        title: {
            type: 'string',
            example: 'Movie Title'
        },
        originalTitle: {
            type: 'string',
            example: 'Original Movie Title'
        },
        releaseDate: {
            type: 'string'
        },
        adult: {
            type: 'boolean',
            example: false
        },
        video: {
            type: 'boolean',
            example: false
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        }
    }
} as const;

export const $TvResult = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1234
        },
        mediaType: {
            type: 'string'
        },
        popularity: {
            type: 'number',
            example: 10
        },
        posterPath: {
            type: 'string'
        },
        backdropPath: {
            type: 'string'
        },
        voteCount: {
            type: 'number'
        },
        voteAverage: {
            type: 'number'
        },
        genreIds: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        overview: {
            type: 'string',
            example: 'Overview of the movie'
        },
        originalLanguage: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'TV Show Name'
        },
        originalName: {
            type: 'string',
            example: 'Original TV Show Name'
        },
        originCountry: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        firstAirDate: {
            type: 'string'
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        }
    }
} as const;

export const $PersonResult = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 12345
        },
        profilePath: {
            type: 'string'
        },
        adult: {
            type: 'boolean',
            example: false
        },
        mediaType: {
            type: 'string',
            default: 'person'
        },
        knownFor: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MovieResult'
                    },
                    {
                        '$ref': '#/components/schemas/TvResult'
                    }
                ]
            }
        }
    }
} as const;

export const $Genre = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        name: {
            type: 'string',
            example: 'Adventure'
        }
    }
} as const;

export const $Company = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        logo_path: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $ProductionCompany = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        logoPath: {
            type: 'string',
            nullable: true
        },
        originCountry: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $Network = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        logoPath: {
            type: 'string',
            nullable: true
        },
        originCountry: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $RelatedVideo = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            example: 'https://www.youtube.com/watch?v=9qhL2_UxXM0/'
        },
        key: {
            type: 'string',
            example: '9qhL2_UxXM0'
        },
        name: {
            type: 'string',
            example: 'Trailer for some movie (1978)'
        },
        size: {
            type: 'number',
            example: 1080
        },
        type: {
            type: 'string',
            example: 'Trailer',
            enum: ['Clip', 'Teaser', 'Trailer', 'Featurette', 'Opening Credits', 'Behind the Scenes', 'Bloopers']
        },
        site: {
            type: 'string',
            enum: ['YouTube']
        }
    }
} as const;

export const $MovieDetails = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123,
            readOnly: true
        },
        imdbId: {
            type: 'string',
            example: 'tt123'
        },
        adult: {
            type: 'boolean'
        },
        backdropPath: {
            type: 'string'
        },
        posterPath: {
            type: 'string'
        },
        budget: {
            type: 'number',
            example: 1000000
        },
        genres: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Genre'
            }
        },
        homepage: {
            type: 'string'
        },
        relatedVideos: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RelatedVideo'
            }
        },
        originalLanguage: {
            type: 'string'
        },
        originalTitle: {
            type: 'string'
        },
        overview: {
            type: 'string'
        },
        popularity: {
            type: 'number'
        },
        productionCompanies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductionCompany'
            }
        },
        productionCountries: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    iso_3166_1: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    }
                }
            }
        },
        releaseDate: {
            type: 'string'
        },
        releases: {
            type: 'object',
            properties: {
                results: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            iso_3166_1: {
                                type: 'string',
                                example: 'US'
                            },
                            rating: {
                                type: 'string',
                                nullable: true
                            },
                            release_dates: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        certification: {
                                            type: 'string',
                                            example: 'PG-13'
                                        },
                                        iso_639_1: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        note: {
                                            type: 'string',
                                            nullable: true,
                                            example: 'Blu ray'
                                        },
                                        release_date: {
                                            type: 'string',
                                            example: '2017-07-12T00:00:00.000Z'
                                        },
                                        type: {
                                            type: 'number',
                                            example: 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        revenue: {
            type: 'number',
            nullable: true
        },
        runtime: {
            type: 'number'
        },
        spokenLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpokenLanguage'
            }
        },
        status: {
            type: 'string'
        },
        tagline: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        video: {
            type: 'boolean'
        },
        voteAverage: {
            type: 'number'
        },
        voteCount: {
            type: 'number'
        },
        credits: {
            type: 'object',
            properties: {
                cast: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Cast'
                    }
                },
                crew: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Crew'
                    }
                }
            }
        },
        collection: {
            type: 'object',
            properties: {
                id: {
                    type: 'number',
                    example: 1
                },
                name: {
                    type: 'string',
                    example: 'A collection'
                },
                posterPath: {
                    type: 'string'
                },
                backdropPath: {
                    type: 'string'
                }
            }
        },
        externalIds: {
            '$ref': '#/components/schemas/ExternalIds'
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        },
        watchProviders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WatchProviders'
            }
        }
    }
} as const;

export const $Episode = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        airDate: {
            type: 'string',
            nullable: true
        },
        episodeNumber: {
            type: 'number'
        },
        overview: {
            type: 'string'
        },
        productionCode: {
            type: 'string'
        },
        seasonNumber: {
            type: 'number'
        },
        showId: {
            type: 'number'
        },
        stillPath: {
            type: 'string',
            nullable: true
        },
        voteAverage: {
            type: 'number'
        },
        voteCount: {
            type: 'number'
        }
    }
} as const;

export const $Season = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        airDate: {
            type: 'string',
            nullable: true
        },
        episodeCount: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        overview: {
            type: 'string'
        },
        posterPath: {
            type: 'string'
        },
        seasonNumber: {
            type: 'number'
        },
        episodes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Episode'
            }
        }
    }
} as const;

export const $TvDetails = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123
        },
        backdropPath: {
            type: 'string'
        },
        posterPath: {
            type: 'string'
        },
        contentRatings: {
            type: 'object',
            properties: {
                results: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            iso_3166_1: {
                                type: 'string',
                                example: 'US'
                            },
                            rating: {
                                type: 'string',
                                example: 'TV-14'
                            }
                        }
                    }
                }
            }
        },
        createdBy: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'number'
                    },
                    name: {
                        type: 'string'
                    },
                    gender: {
                        type: 'number'
                    },
                    profilePath: {
                        type: 'string',
                        nullable: true
                    }
                }
            }
        },
        episodeRunTime: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        firstAirDate: {
            type: 'string'
        },
        genres: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Genre'
            }
        },
        homepage: {
            type: 'string'
        },
        inProduction: {
            type: 'boolean'
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        lastAirDate: {
            type: 'string'
        },
        lastEpisodeToAir: {
            '$ref': '#/components/schemas/Episode'
        },
        name: {
            type: 'string'
        },
        nextEpisodeToAir: {
            '$ref': '#/components/schemas/Episode'
        },
        networks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductionCompany'
            }
        },
        numberOfEpisodes: {
            type: 'number'
        },
        numberOfSeason: {
            type: 'number'
        },
        originCountry: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        originalLanguage: {
            type: 'string'
        },
        originalName: {
            type: 'string'
        },
        overview: {
            type: 'string'
        },
        popularity: {
            type: 'number'
        },
        productionCompanies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductionCompany'
            }
        },
        productionCountries: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    iso_3166_1: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    }
                }
            }
        },
        spokenLanguages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpokenLanguage'
            }
        },
        seasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Season'
            }
        },
        status: {
            type: 'string'
        },
        tagline: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        voteAverage: {
            type: 'number'
        },
        voteCount: {
            type: 'number'
        },
        credits: {
            type: 'object',
            properties: {
                cast: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Cast'
                    }
                },
                crew: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Crew'
                    }
                }
            }
        },
        externalIds: {
            '$ref': '#/components/schemas/ExternalIds'
        },
        keywords: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Keyword'
            }
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        },
        watchProviders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WatchProviders'
            }
        }
    }
} as const;

export const $MediaRequest = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123,
            readOnly: true
        },
        status: {
            type: 'number',
            example: 0,
            description: 'Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED',
            readOnly: true
        },
        media: {
            '$ref': '#/components/schemas/MediaInfo'
        },
        createdAt: {
            type: 'string',
            example: '2020-09-12T10:00:27.000Z',
            readOnly: true
        },
        updatedAt: {
            type: 'string',
            example: '2020-09-12T10:00:27.000Z',
            readOnly: true
        },
        requestedBy: {
            '$ref': '#/components/schemas/User'
        },
        modifiedBy: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/User'
                },
                {
                    type: 'string',
                    nullable: true
                }
            ]
        },
        is4k: {
            type: 'boolean',
            example: false
        },
        serverId: {
            type: 'number'
        },
        profileId: {
            type: 'number'
        },
        rootFolder: {
            type: 'string'
        }
    },
    required: ['id', 'status']
} as const;

export const $MediaInfo = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            readOnly: true
        },
        tmdbId: {
            type: 'number',
            readOnly: true
        },
        tvdbId: {
            type: 'number',
            readOnly: true,
            nullable: true
        },
        status: {
            type: 'number',
            example: 0,
            description: 'Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`'
        },
        requests: {
            type: 'array',
            readOnly: true,
            items: {
                '$ref': '#/components/schemas/MediaRequest'
            }
        },
        createdAt: {
            type: 'string',
            example: '2020-09-12T10:00:27.000Z',
            readOnly: true
        },
        updatedAt: {
            type: 'string',
            example: '2020-09-12T10:00:27.000Z',
            readOnly: true
        }
    }
} as const;

export const $Cast = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123
        },
        castId: {
            type: 'number',
            example: 1
        },
        character: {
            type: 'string',
            example: 'Some Character Name'
        },
        creditId: {
            type: 'string'
        },
        gender: {
            type: 'number'
        },
        name: {
            type: 'string',
            example: 'Some Persons Name'
        },
        order: {
            type: 'number'
        },
        profilePath: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $Crew = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123
        },
        creditId: {
            type: 'string'
        },
        gender: {
            type: 'number'
        },
        name: {
            type: 'string',
            example: 'Some Persons Name'
        },
        job: {
            type: 'string'
        },
        department: {
            type: 'string'
        },
        profilePath: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $ExternalIds = {
    type: 'object',
    properties: {
        facebookId: {
            type: 'string',
            nullable: true
        },
        freebaseId: {
            type: 'string',
            nullable: true
        },
        freebaseMid: {
            type: 'string',
            nullable: true
        },
        imdbId: {
            type: 'string',
            nullable: true
        },
        instagramId: {
            type: 'string',
            nullable: true
        },
        tvdbId: {
            type: 'number',
            nullable: true
        },
        tvrageId: {
            type: 'number',
            nullable: true
        },
        twitterId: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $ServiceProfile = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        name: {
            type: 'string',
            example: '720p/1080p'
        }
    }
} as const;

export const $PageInfo = {
    type: 'object',
    properties: {
        page: {
            type: 'number',
            example: 1
        },
        pages: {
            type: 'number',
            example: 10
        },
        results: {
            type: 'number',
            example: 100
        }
    }
} as const;

export const $DiscordSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                botUsername: {
                    type: 'string'
                },
                botAvatarUrl: {
                    type: 'string'
                },
                webhookUrl: {
                    type: 'string'
                },
                enableMentions: {
                    type: 'boolean'
                }
            }
        }
    }
} as const;

export const $SlackSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                webhookUrl: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $WebPushSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        }
    }
} as const;

export const $WebhookSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                webhookUrl: {
                    type: 'string'
                },
                authHeader: {
                    type: 'string'
                },
                jsonPayload: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $TelegramSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                botUsername: {
                    type: 'string'
                },
                botAPI: {
                    type: 'string'
                },
                chatId: {
                    type: 'string'
                },
                sendSilently: {
                    type: 'boolean'
                }
            }
        }
    }
} as const;

export const $PushbulletSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                accessToken: {
                    type: 'string'
                },
                channelTag: {
                    type: 'string',
                    nullable: true
                }
            }
        }
    }
} as const;

export const $PushoverSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                accessToken: {
                    type: 'string'
                },
                userToken: {
                    type: 'string'
                },
                sound: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $GotifySettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                url: {
                    type: 'string'
                },
                token: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $LunaSeaSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                webhookUrl: {
                    type: 'string'
                },
                profileName: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const $NotificationEmailSettings = {
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean',
            example: false
        },
        types: {
            type: 'number',
            example: 2
        },
        options: {
            type: 'object',
            properties: {
                emailFrom: {
                    type: 'string',
                    example: 'no-reply@example.com'
                },
                senderName: {
                    type: 'string',
                    example: 'Overseerr'
                },
                smtpHost: {
                    type: 'string',
                    example: '127.0.0.1'
                },
                smtpPort: {
                    type: 'number',
                    example: 465
                },
                secure: {
                    type: 'boolean',
                    example: false
                },
                ignoreTls: {
                    type: 'boolean',
                    example: false
                },
                requireTls: {
                    type: 'boolean',
                    example: false
                },
                authUser: {
                    type: 'string',
                    nullable: true
                },
                authPass: {
                    type: 'string',
                    nullable: true
                },
                allowSelfSigned: {
                    type: 'boolean',
                    example: false
                }
            }
        }
    }
} as const;

export const $Job = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            example: 'job-name'
        },
        type: {
            type: 'string',
            enum: ['process', 'command']
        },
        interval: {
            type: 'string',
            enum: ['short', 'long', 'fixed']
        },
        name: {
            type: 'string',
            example: 'A Job Name'
        },
        nextExecutionTime: {
            type: 'string',
            example: '2020-09-02T05:02:23.000Z'
        },
        running: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $PersonDetails = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        name: {
            type: 'string'
        },
        deathday: {
            type: 'string'
        },
        knownForDepartment: {
            type: 'string'
        },
        alsoKnownAs: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        gender: {
            type: 'string'
        },
        biography: {
            type: 'string'
        },
        popularity: {
            type: 'string'
        },
        placeOfBirth: {
            type: 'string'
        },
        profilePath: {
            type: 'string'
        },
        adult: {
            type: 'boolean'
        },
        imdbId: {
            type: 'string'
        },
        homepage: {
            type: 'string'
        }
    }
} as const;

export const $CreditCast = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        originalLanguage: {
            type: 'string'
        },
        episodeCount: {
            type: 'number'
        },
        overview: {
            type: 'string'
        },
        originCountry: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        originalName: {
            type: 'string'
        },
        voteCount: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        mediaType: {
            type: 'string'
        },
        popularity: {
            type: 'number'
        },
        creditId: {
            type: 'string'
        },
        backdropPath: {
            type: 'string'
        },
        firstAirDate: {
            type: 'string'
        },
        voteAverage: {
            type: 'number'
        },
        genreIds: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        posterPath: {
            type: 'string'
        },
        originalTitle: {
            type: 'string'
        },
        video: {
            type: 'boolean'
        },
        title: {
            type: 'string'
        },
        adult: {
            type: 'boolean'
        },
        releaseDate: {
            type: 'string'
        },
        character: {
            type: 'string'
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        }
    }
} as const;

export const $CreditCrew = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        originalLanguage: {
            type: 'string'
        },
        episodeCount: {
            type: 'number'
        },
        overview: {
            type: 'string'
        },
        originCountry: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        originalName: {
            type: 'string'
        },
        voteCount: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        mediaType: {
            type: 'string'
        },
        popularity: {
            type: 'number'
        },
        creditId: {
            type: 'string'
        },
        backdropPath: {
            type: 'string'
        },
        firstAirDate: {
            type: 'string'
        },
        voteAverage: {
            type: 'number'
        },
        genreIds: {
            type: 'array',
            items: {
                type: 'number'
            }
        },
        posterPath: {
            type: 'string'
        },
        originalTitle: {
            type: 'string'
        },
        video: {
            type: 'boolean'
        },
        title: {
            type: 'string'
        },
        adult: {
            type: 'boolean'
        },
        releaseDate: {
            type: 'string'
        },
        department: {
            type: 'string'
        },
        job: {
            type: 'string'
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfo'
        }
    }
} as const;

export const $Keyword = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        name: {
            type: 'string',
            example: 'anime'
        }
    }
} as const;

export const $SpokenLanguage = {
    type: 'object',
    properties: {
        englishName: {
            type: 'string',
            example: 'English',
            nullable: true
        },
        iso_639_1: {
            type: 'string',
            example: 'en'
        },
        name: {
            type: 'string',
            example: 'English'
        }
    }
} as const;

export const $Collection = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 123
        },
        name: {
            type: 'string',
            example: 'A Movie Collection'
        },
        overview: {
            type: 'string',
            example: 'Overview of collection'
        },
        posterPath: {
            type: 'string'
        },
        backdropPath: {
            type: 'string'
        },
        parts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MovieResult'
            }
        }
    }
} as const;

export const $SonarrSeries = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            example: 'COVID-25'
        },
        sortTitle: {
            type: 'string',
            example: 'covid 25'
        },
        seasonCount: {
            type: 'number',
            example: 1
        },
        status: {
            type: 'string',
            example: 'upcoming'
        },
        overview: {
            type: 'string',
            example: 'The thread is picked up again by Marianne Schmidt which ...'
        },
        network: {
            type: 'string',
            example: 'CBS'
        },
        airTime: {
            type: 'string',
            example: '02:15'
        },
        images: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    coverType: {
                        type: 'string',
                        example: 'banner'
                    },
                    url: {
                        type: 'string',
                        example: '/sonarr/MediaCoverProxy/6467f05d9872726ad08cbf920e5fee4bf69198682260acab8eab5d3c2c958e92/5c8f116c6aa5c.jpg'
                    }
                }
            }
        },
        remotePoster: {
            type: 'string',
            example: 'https://artworks.thetvdb.com/banners/posters/5c8f116129983.jpg'
        },
        seasons: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    seasonNumber: {
                        type: 'number',
                        example: 1
                    },
                    monitored: {
                        type: 'boolean',
                        example: true
                    }
                }
            }
        },
        year: {
            type: 'number',
            example: 2015
        },
        path: {
            type: 'string'
        },
        profileId: {
            type: 'number'
        },
        languageProfileId: {
            type: 'number'
        },
        seasonFolder: {
            type: 'boolean'
        },
        monitored: {
            type: 'boolean'
        },
        useSceneNumbering: {
            type: 'boolean'
        },
        runtime: {
            type: 'number'
        },
        tvdbId: {
            type: 'number',
            example: 12345
        },
        tvRageId: {
            type: 'number'
        },
        tvMazeId: {
            type: 'number'
        },
        firstAired: {
            type: 'string'
        },
        lastInfoSync: {
            type: 'string',
            nullable: true
        },
        seriesType: {
            type: 'string'
        },
        cleanTitle: {
            type: 'string'
        },
        imdbId: {
            type: 'string'
        },
        titleSlug: {
            type: 'string'
        },
        certification: {
            type: 'string'
        },
        genres: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        added: {
            type: 'string'
        },
        ratings: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    votes: {
                        type: 'number'
                    },
                    value: {
                        type: 'number'
                    }
                }
            }
        },
        qualityProfileId: {
            type: 'number'
        },
        id: {
            type: 'number',
            nullable: true
        },
        rootFolderPath: {
            type: 'string',
            nullable: true
        },
        addOptions: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    ignoreEpisodesWithFiles: {
                        type: 'boolean',
                        nullable: true
                    },
                    ignoreEpisodesWithoutFiles: {
                        type: 'boolean',
                        nullable: true
                    },
                    searchForMissingEpisodes: {
                        type: 'boolean',
                        nullable: true
                    }
                }
            }
        }
    }
} as const;

export const $UserSettingsNotifications = {
    type: 'object',
    properties: {
        notificationTypes: {
            '$ref': '#/components/schemas/NotificationAgentTypes'
        },
        emailEnabled: {
            type: 'boolean'
        },
        pgpKey: {
            type: 'string',
            nullable: true
        },
        discordEnabled: {
            type: 'boolean'
        },
        discordEnabledTypes: {
            type: 'number',
            nullable: true
        },
        discordId: {
            type: 'string',
            nullable: true
        },
        pushbulletAccessToken: {
            type: 'string',
            nullable: true
        },
        pushoverApplicationToken: {
            type: 'string',
            nullable: true
        },
        pushoverUserKey: {
            type: 'string',
            nullable: true
        },
        pushoverSound: {
            type: 'string',
            nullable: true
        },
        telegramEnabled: {
            type: 'boolean'
        },
        telegramBotUsername: {
            type: 'string',
            nullable: true
        },
        telegramChatId: {
            type: 'string',
            nullable: true
        },
        telegramSendSilently: {
            type: 'boolean',
            nullable: true
        }
    }
} as const;

export const $NotificationAgentTypes = {
    type: 'object',
    properties: {
        discord: {
            type: 'number'
        },
        email: {
            type: 'number'
        },
        pushbullet: {
            type: 'number'
        },
        pushover: {
            type: 'number'
        },
        slack: {
            type: 'number'
        },
        telegram: {
            type: 'number'
        },
        webhook: {
            type: 'number'
        },
        webpush: {
            type: 'number'
        }
    }
} as const;

export const $WatchProviders = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            iso_3166_1: {
                type: 'string'
            },
            link: {
                type: 'string'
            },
            buy: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/WatchProviderDetails'
                }
            },
            flatrate: {
                items: {
                    '$ref': '#/components/schemas/WatchProviderDetails'
                }
            }
        }
    }
} as const;

export const $WatchProviderDetails = {
    type: 'object',
    properties: {
        displayPriority: {
            type: 'number'
        },
        logoPath: {
            type: 'string'
        },
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $Issue = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        issueType: {
            type: 'number',
            example: 1
        },
        media: {
            '$ref': '#/components/schemas/MediaInfo'
        },
        createdBy: {
            '$ref': '#/components/schemas/User'
        },
        modifiedBy: {
            '$ref': '#/components/schemas/User'
        },
        comments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IssueComment'
            }
        }
    }
} as const;

export const $IssueComment = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        message: {
            type: 'string',
            example: 'A comment'
        }
    }
} as const;

export const $DiscoverSlider = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            example: 1
        },
        type: {
            type: 'number',
            example: 1
        },
        title: {
            type: 'string',
            nullable: true
        },
        isBuiltIn: {
            type: 'boolean'
        },
        enabled: {
            type: 'boolean'
        },
        data: {
            type: 'string',
            example: '1234',
            nullable: true
        }
    },
    required: ['type', 'enabled', 'title', 'data']
} as const;

export const $WatchProviderRegion = {
    type: 'object',
    properties: {
        iso_3166_1: {
            type: 'string'
        },
        english_name: {
            type: 'string'
        },
        native_name: {
            type: 'string'
        }
    }
} as const;
// This file is auto-generated by @hey-api/openapi-ts

import type { DeleteIssueByIssueIdData, DeleteIssueByIssueIdError, DeleteIssueByIssueIdResponse, DeleteIssueCommentByCommentIdData, DeleteIssueCommentByCommentIdError, DeleteIssueCommentByCommentIdResponse, DeleteMediaByMediaIdData, DeleteMediaByMediaIdError, DeleteMediaByMediaIdResponse, DeleteRequestByRequestIdData, DeleteRequestByRequestIdError, DeleteRequestByRequestIdResponse, DeleteSettingsDiscoverBySliderIdData, DeleteSettingsDiscoverBySliderIdError, DeleteSettingsDiscoverBySliderIdResponse, DeleteSettingsRadarrByRadarrIdData, DeleteSettingsRadarrByRadarrIdError, DeleteSettingsRadarrByRadarrIdResponse, DeleteSettingsSonarrBySonarrIdData, DeleteSettingsSonarrBySonarrIdError, DeleteSettingsSonarrBySonarrIdResponse, DeleteUserByUserIdData, DeleteUserByUserIdError, DeleteUserByUserIdResponse, GetAuthMeError, GetAuthMeResponse, GetBackdropsError, GetBackdropsResponse, GetCollectionByCollectionIdData, GetCollectionByCollectionIdError, GetCollectionByCollectionIdResponse, GetDiscoverGenresliderMovieData, GetDiscoverGenresliderMovieError, GetDiscoverGenresliderMovieResponse, GetDiscoverGenresliderTvData, GetDiscoverGenresliderTvError, GetDiscoverGenresliderTvResponse, GetDiscoverKeywordByKeywordIdMoviesData, GetDiscoverKeywordByKeywordIdMoviesError, GetDiscoverKeywordByKeywordIdMoviesResponse, GetDiscoverMoviesData, GetDiscoverMoviesError, GetDiscoverMoviesGenreByGenreIdData, GetDiscoverMoviesGenreByGenreIdError, GetDiscoverMoviesGenreByGenreIdResponse, GetDiscoverMoviesLanguageByLanguageData, GetDiscoverMoviesLanguageByLanguageError, GetDiscoverMoviesLanguageByLanguageResponse, GetDiscoverMoviesResponse, GetDiscoverMoviesStudioByStudioIdData, GetDiscoverMoviesStudioByStudioIdError, GetDiscoverMoviesStudioByStudioIdResponse, GetDiscoverMoviesUpcomingData, GetDiscoverMoviesUpcomingError, GetDiscoverMoviesUpcomingResponse, GetDiscoverTrendingData, GetDiscoverTrendingError, GetDiscoverTrendingResponse, GetDiscoverTvData, GetDiscoverTvError, GetDiscoverTvGenreByGenreIdData, GetDiscoverTvGenreByGenreIdError, GetDiscoverTvGenreByGenreIdResponse, GetDiscoverTvLanguageByLanguageData, GetDiscoverTvLanguageByLanguageError, GetDiscoverTvLanguageByLanguageResponse, GetDiscoverTvNetworkByNetworkIdData, GetDiscoverTvNetworkByNetworkIdError, GetDiscoverTvNetworkByNetworkIdResponse, GetDiscoverTvResponse, GetDiscoverTvUpcomingData, GetDiscoverTvUpcomingError, GetDiscoverTvUpcomingResponse, GetDiscoverWatchlistData, GetDiscoverWatchlistError, GetDiscoverWatchlistResponse, GetGenresMovieData, GetGenresMovieError, GetGenresMovieResponse, GetGenresTvData, GetGenresTvError, GetGenresTvResponse, GetIssueByIssueIdData, GetIssueByIssueIdError, GetIssueByIssueIdResponse, GetIssueCommentByCommentIdData, GetIssueCommentByCommentIdError, GetIssueCommentByCommentIdResponse, GetIssueCountError, GetIssueCountResponse, GetIssueData, GetIssueError, GetIssueResponse, GetKeywordByKeywordIdData, GetKeywordByKeywordIdError, GetKeywordByKeywordIdResponse, GetLanguagesError, GetLanguagesResponse, GetMediaByMediaIdWatchDataData, GetMediaByMediaIdWatchDataError, GetMediaByMediaIdWatchDataResponse, GetMediaData, GetMediaError, GetMediaResponse, GetMovieByMovieIdData, GetMovieByMovieIdError, GetMovieByMovieIdRatingscombinedData, GetMovieByMovieIdRatingscombinedError, GetMovieByMovieIdRatingscombinedResponse, GetMovieByMovieIdRatingsData, GetMovieByMovieIdRatingsError, GetMovieByMovieIdRatingsResponse, GetMovieByMovieIdRecommendationsData, GetMovieByMovieIdRecommendationsError, GetMovieByMovieIdRecommendationsResponse, GetMovieByMovieIdResponse, GetMovieByMovieIdSimilarData, GetMovieByMovieIdSimilarError, GetMovieByMovieIdSimilarResponse, GetNetworkByNetworkIdData, GetNetworkByNetworkIdError, GetNetworkByNetworkIdResponse, GetPersonByPersonIdCombinedCreditsData, GetPersonByPersonIdCombinedCreditsError, GetPersonByPersonIdCombinedCreditsResponse, GetPersonByPersonIdData, GetPersonByPersonIdError, GetPersonByPersonIdResponse, GetRegionsError, GetRegionsResponse, GetRequestByRequestIdData, GetRequestByRequestIdError, GetRequestByRequestIdResponse, GetRequestCountError, GetRequestCountResponse, GetRequestData, GetRequestError, GetRequestResponse, GetSearchCompanyData, GetSearchCompanyError, GetSearchCompanyResponse, GetSearchData, GetSearchError, GetSearchKeywordData, GetSearchKeywordError, GetSearchKeywordResponse, GetSearchResponse, GetServiceRadarrByRadarrIdData, GetServiceRadarrByRadarrIdError, GetServiceRadarrByRadarrIdResponse, GetServiceRadarrError, GetServiceRadarrResponse, GetServiceSonarrBySonarrIdData, GetServiceSonarrBySonarrIdError, GetServiceSonarrBySonarrIdResponse, GetServiceSonarrError, GetServiceSonarrLookupByTmdbIdData, GetServiceSonarrLookupByTmdbIdError, GetServiceSonarrLookupByTmdbIdResponse, GetServiceSonarrResponse, GetSettingsAboutError, GetSettingsAboutResponse, GetSettingsCacheError, GetSettingsCacheResponse, GetSettingsDiscoverError, GetSettingsDiscoverResetError, GetSettingsDiscoverResetResponse, GetSettingsDiscoverResponse, GetSettingsJobsError, GetSettingsJobsResponse, GetSettingsLogsData, GetSettingsLogsError, GetSettingsLogsResponse, GetSettingsMainError, GetSettingsMainResponse, GetSettingsNotificationsDiscordError, GetSettingsNotificationsDiscordResponse, GetSettingsNotificationsEmailError, GetSettingsNotificationsEmailResponse, GetSettingsNotificationsGotifyError, GetSettingsNotificationsGotifyResponse, GetSettingsNotificationsLunaseaError, GetSettingsNotificationsLunaseaResponse, GetSettingsNotificationsPushbulletError, GetSettingsNotificationsPushbulletResponse, GetSettingsNotificationsPushoverError, GetSettingsNotificationsPushoverResponse, GetSettingsNotificationsPushoverSoundsData, GetSettingsNotificationsPushoverSoundsError, GetSettingsNotificationsPushoverSoundsResponse, GetSettingsNotificationsSlackError, GetSettingsNotificationsSlackResponse, GetSettingsNotificationsTelegramError, GetSettingsNotificationsTelegramResponse, GetSettingsNotificationsWebhookError, GetSettingsNotificationsWebhookResponse, GetSettingsNotificationsWebpushError, GetSettingsNotificationsWebpushResponse, GetSettingsPlexDevicesServersError, GetSettingsPlexDevicesServersResponse, GetSettingsPlexError, GetSettingsPlexLibraryData, GetSettingsPlexLibraryError, GetSettingsPlexLibraryResponse, GetSettingsPlexResponse, GetSettingsPlexSyncError, GetSettingsPlexSyncResponse, GetSettingsPlexUsersError, GetSettingsPlexUsersResponse, GetSettingsPublicError, GetSettingsPublicResponse, GetSettingsRadarrByRadarrIdProfilesData, GetSettingsRadarrByRadarrIdProfilesError, GetSettingsRadarrByRadarrIdProfilesResponse, GetSettingsRadarrError, GetSettingsRadarrResponse, GetSettingsSonarrError, GetSettingsSonarrResponse, GetSettingsTautulliError, GetSettingsTautulliResponse, GetStatusAppdataError, GetStatusAppdataResponse, GetStatusError, GetStatusResponse, GetStudioByStudioIdData, GetStudioByStudioIdError, GetStudioByStudioIdResponse, GetTvByTvIdData, GetTvByTvIdError, GetTvByTvIdRatingsData, GetTvByTvIdRatingsError, GetTvByTvIdRatingsResponse, GetTvByTvIdRecommendationsData, GetTvByTvIdRecommendationsError, GetTvByTvIdRecommendationsResponse, GetTvByTvIdResponse, GetTvByTvIdSeasonBySeasonIdData, GetTvByTvIdSeasonBySeasonIdError, GetTvByTvIdSeasonBySeasonIdResponse, GetTvByTvIdSimilarData, GetTvByTvIdSimilarError, GetTvByTvIdSimilarResponse, GetUserByUserIdData, GetUserByUserIdError, GetUserByUserIdQuotaData, GetUserByUserIdQuotaError, GetUserByUserIdQuotaResponse, GetUserByUserIdRequestsData, GetUserByUserIdRequestsError, GetUserByUserIdRequestsResponse, GetUserByUserIdResponse, GetUserByUserIdSettingsMainData, GetUserByUserIdSettingsMainError, GetUserByUserIdSettingsMainResponse, GetUserByUserIdSettingsNotificationsData, GetUserByUserIdSettingsNotificationsError, GetUserByUserIdSettingsNotificationsResponse, GetUserByUserIdSettingsPasswordData, GetUserByUserIdSettingsPasswordError, GetUserByUserIdSettingsPasswordResponse, GetUserByUserIdSettingsPermissionsData, GetUserByUserIdSettingsPermissionsError, GetUserByUserIdSettingsPermissionsResponse, GetUserByUserIdWatchDataData, GetUserByUserIdWatchDataError, GetUserByUserIdWatchDataResponse, GetUserByUserIdWatchlistData, GetUserByUserIdWatchlistError, GetUserByUserIdWatchlistResponse, GetUserData, GetUserError, GetUserResponse, GetWatchprovidersMoviesData, GetWatchprovidersMoviesError, GetWatchprovidersMoviesResponse, GetWatchprovidersRegionsError, GetWatchprovidersRegionsResponse, GetWatchprovidersTvData, GetWatchprovidersTvError, GetWatchprovidersTvResponse, PostAuthLocalData, PostAuthLocalError, PostAuthLocalResponse, PostAuthLogoutError, PostAuthLogoutResponse, PostAuthPlexData, PostAuthPlexError, PostAuthPlexResponse, PostAuthResetPasswordByGuidData, PostAuthResetPasswordByGuidError, PostAuthResetPasswordByGuidResponse, PostAuthResetPasswordData, PostAuthResetPasswordError, PostAuthResetPasswordResponse, PostIssueByIssueIdByStatusData, PostIssueByIssueIdByStatusError, PostIssueByIssueIdByStatusResponse, PostIssueByIssueIdCommentData, PostIssueByIssueIdCommentError, PostIssueByIssueIdCommentResponse, PostIssueData, PostIssueError, PostIssueResponse, PostMediaByMediaIdByStatusData, PostMediaByMediaIdByStatusError, PostMediaByMediaIdByStatusResponse, PostRequestByRequestIdByStatusData, PostRequestByRequestIdByStatusError, PostRequestByRequestIdByStatusResponse, PostRequestByRequestIdRetryData, PostRequestByRequestIdRetryError, PostRequestByRequestIdRetryResponse, PostRequestData, PostRequestError, PostRequestResponse, PostSettingsCacheByCacheIdFlushData, PostSettingsCacheByCacheIdFlushError, PostSettingsCacheByCacheIdFlushResponse, PostSettingsDiscoverAddData, PostSettingsDiscoverAddError, PostSettingsDiscoverAddResponse, PostSettingsDiscoverData, PostSettingsDiscoverError, PostSettingsDiscoverResponse, PostSettingsInitializeError, PostSettingsInitializeResponse, PostSettingsJobsByJobIdCancelData, PostSettingsJobsByJobIdCancelError, PostSettingsJobsByJobIdCancelResponse, PostSettingsJobsByJobIdRunData, PostSettingsJobsByJobIdRunError, PostSettingsJobsByJobIdRunResponse, PostSettingsJobsByJobIdScheduleData, PostSettingsJobsByJobIdScheduleError, PostSettingsJobsByJobIdScheduleResponse, PostSettingsMainData, PostSettingsMainError, PostSettingsMainRegenerateError, PostSettingsMainRegenerateResponse, PostSettingsMainResponse, PostSettingsNotificationsDiscordData, PostSettingsNotificationsDiscordError, PostSettingsNotificationsDiscordResponse, PostSettingsNotificationsDiscordTestData, PostSettingsNotificationsDiscordTestError, PostSettingsNotificationsDiscordTestResponse, PostSettingsNotificationsEmailData, PostSettingsNotificationsEmailError, PostSettingsNotificationsEmailResponse, PostSettingsNotificationsEmailTestData, PostSettingsNotificationsEmailTestError, PostSettingsNotificationsEmailTestResponse, PostSettingsNotificationsGotifyData, PostSettingsNotificationsGotifyError, PostSettingsNotificationsGotifyResponse, PostSettingsNotificationsGotifyTestData, PostSettingsNotificationsGotifyTestError, PostSettingsNotificationsGotifyTestResponse, PostSettingsNotificationsLunaseaData, PostSettingsNotificationsLunaseaError, PostSettingsNotificationsLunaseaResponse, PostSettingsNotificationsLunaseaTestData, PostSettingsNotificationsLunaseaTestError, PostSettingsNotificationsLunaseaTestResponse, PostSettingsNotificationsPushbulletData, PostSettingsNotificationsPushbulletError, PostSettingsNotificationsPushbulletResponse, PostSettingsNotificationsPushbulletTestData, PostSettingsNotificationsPushbulletTestError, PostSettingsNotificationsPushbulletTestResponse, PostSettingsNotificationsPushoverData, PostSettingsNotificationsPushoverError, PostSettingsNotificationsPushoverResponse, PostSettingsNotificationsPushoverTestData, PostSettingsNotificationsPushoverTestError, PostSettingsNotificationsPushoverTestResponse, PostSettingsNotificationsSlackData, PostSettingsNotificationsSlackError, PostSettingsNotificationsSlackResponse, PostSettingsNotificationsSlackTestData, PostSettingsNotificationsSlackTestError, PostSettingsNotificationsSlackTestResponse, PostSettingsNotificationsTelegramData, PostSettingsNotificationsTelegramError, PostSettingsNotificationsTelegramResponse, PostSettingsNotificationsTelegramTestData, PostSettingsNotificationsTelegramTestError, PostSettingsNotificationsTelegramTestResponse, PostSettingsNotificationsWebhookData, PostSettingsNotificationsWebhookError, PostSettingsNotificationsWebhookResponse, PostSettingsNotificationsWebhookTestData, PostSettingsNotificationsWebhookTestError, PostSettingsNotificationsWebhookTestResponse, PostSettingsNotificationsWebpushData, PostSettingsNotificationsWebpushError, PostSettingsNotificationsWebpushResponse, PostSettingsNotificationsWebpushTestData, PostSettingsNotificationsWebpushTestError, PostSettingsNotificationsWebpushTestResponse, PostSettingsPlexData, PostSettingsPlexError, PostSettingsPlexResponse, PostSettingsPlexSyncData, PostSettingsPlexSyncError, PostSettingsPlexSyncResponse, PostSettingsRadarrData, PostSettingsRadarrError, PostSettingsRadarrResponse, PostSettingsRadarrTestData, PostSettingsRadarrTestError, PostSettingsRadarrTestResponse, PostSettingsSonarrData, PostSettingsSonarrError, PostSettingsSonarrResponse, PostSettingsSonarrTestData, PostSettingsSonarrTestError, PostSettingsSonarrTestResponse, PostSettingsTautulliData, PostSettingsTautulliError, PostSettingsTautulliResponse, PostUserByUserIdSettingsMainData, PostUserByUserIdSettingsMainError, PostUserByUserIdSettingsMainResponse, PostUserByUserIdSettingsNotificationsData, PostUserByUserIdSettingsNotificationsError, PostUserByUserIdSettingsNotificationsResponse, PostUserByUserIdSettingsPasswordData, PostUserByUserIdSettingsPasswordError, PostUserByUserIdSettingsPasswordResponse, PostUserByUserIdSettingsPermissionsData, PostUserByUserIdSettingsPermissionsError, PostUserByUserIdSettingsPermissionsResponse, PostUserData, PostUserError, PostUserImportFromPlexData, PostUserImportFromPlexError, PostUserImportFromPlexResponse, PostUserRegisterPushSubscriptionData, PostUserRegisterPushSubscriptionError, PostUserRegisterPushSubscriptionResponse, PostUserResponse, PutIssueCommentByCommentIdData, PutIssueCommentByCommentIdError, PutIssueCommentByCommentIdResponse, PutRequestByRequestIdData, PutRequestByRequestIdError, PutRequestByRequestIdResponse, PutSettingsDiscoverBySliderIdData, PutSettingsDiscoverBySliderIdError, PutSettingsDiscoverBySliderIdResponse, PutSettingsRadarrByRadarrIdData, PutSettingsRadarrByRadarrIdError, PutSettingsRadarrByRadarrIdResponse, PutSettingsSonarrBySonarrIdData, PutSettingsSonarrBySonarrIdError, PutSettingsSonarrBySonarrIdResponse, PutUserByUserIdData, PutUserByUserIdError, PutUserByUserIdResponse, PutUserData, PutUserError, PutUserResponse } from './types.gen';
import { createClient, createConfig, type Options } from '@hey-api/client-fetch';

const client = createClient(createConfig());

/**
 * Get Overseerr status
 * Returns the current Overseerr status in a JSON object.
 */
export const getStatus = (options?: Options) => { return (options?.client ?? client).get<GetStatusResponse, GetStatusError>({
    ...options,
    url: '/status'
}); };

/**
 * Get application data volume status
 * For Docker installs, returns whether or not the volume mount was configured properly. Always returns true for non-Docker installs.
 */
export const getStatusAppdata = (options?: Options) => { return (options?.client ?? client).get<GetStatusAppdataResponse, GetStatusAppdataError>({
    ...options,
    url: '/status/appdata'
}); };

/**
 * Get main settings
 * Retrieves all main settings in a JSON object.
 */
export const getSettingsMain = (options?: Options) => { return (options?.client ?? client).get<GetSettingsMainResponse, GetSettingsMainError>({
    ...options,
    url: '/settings/main'
}); };

/**
 * Update main settings
 * Updates main settings with the provided values.
 */
export const postSettingsMain = (options: Options<PostSettingsMainData>) => { return (options?.client ?? client).post<PostSettingsMainResponse, PostSettingsMainError>({
    ...options,
    url: '/settings/main'
}); };

/**
 * Get main settings with newly-generated API key
 * Returns main settings in a JSON object, using the new API key.
 */
export const postSettingsMainRegenerate = (options?: Options) => { return (options?.client ?? client).post<PostSettingsMainRegenerateResponse, PostSettingsMainRegenerateError>({
    ...options,
    url: '/settings/main/regenerate'
}); };

/**
 * Get Plex settings
 * Retrieves current Plex settings.
 */
export const getSettingsPlex = (options?: Options) => { return (options?.client ?? client).get<GetSettingsPlexResponse, GetSettingsPlexError>({
    ...options,
    url: '/settings/plex'
}); };

/**
 * Update Plex settings
 * Updates Plex settings with the provided values.
 */
export const postSettingsPlex = (options: Options<PostSettingsPlexData>) => { return (options?.client ?? client).post<PostSettingsPlexResponse, PostSettingsPlexError>({
    ...options,
    url: '/settings/plex'
}); };

/**
 * Get Plex libraries
 * Returns a list of Plex libraries in a JSON array.
 */
export const getSettingsPlexLibrary = (options?: Options<GetSettingsPlexLibraryData>) => { return (options?.client ?? client).get<GetSettingsPlexLibraryResponse, GetSettingsPlexLibraryError>({
    ...options,
    url: '/settings/plex/library'
}); };

/**
 * Get status of full Plex library scan
 * Returns scan progress in a JSON array.
 */
export const getSettingsPlexSync = (options?: Options) => { return (options?.client ?? client).get<GetSettingsPlexSyncResponse, GetSettingsPlexSyncError>({
    ...options,
    url: '/settings/plex/sync'
}); };

/**
 * Start full Plex library scan
 * Runs a full Plex library scan and returns the progress in a JSON array.
 */
export const postSettingsPlexSync = (options?: Options<PostSettingsPlexSyncData>) => { return (options?.client ?? client).post<PostSettingsPlexSyncResponse, PostSettingsPlexSyncError>({
    ...options,
    url: '/settings/plex/sync'
}); };

/**
 * Gets the user's available Plex servers
 * Returns a list of available Plex servers and their connectivity state
 */
export const getSettingsPlexDevicesServers = (options?: Options) => { return (options?.client ?? client).get<GetSettingsPlexDevicesServersResponse, GetSettingsPlexDevicesServersError>({
    ...options,
    url: '/settings/plex/devices/servers'
}); };

/**
 * Get Plex users
 * Returns a list of Plex users in a JSON array.
 *
 * Requires the `MANAGE_USERS` permission.
 *
 */
export const getSettingsPlexUsers = (options?: Options) => { return (options?.client ?? client).get<GetSettingsPlexUsersResponse, GetSettingsPlexUsersError>({
    ...options,
    url: '/settings/plex/users'
}); };

/**
 * Get Tautulli settings
 * Retrieves current Tautulli settings.
 */
export const getSettingsTautulli = (options?: Options) => { return (options?.client ?? client).get<GetSettingsTautulliResponse, GetSettingsTautulliError>({
    ...options,
    url: '/settings/tautulli'
}); };

/**
 * Update Tautulli settings
 * Updates Tautulli settings with the provided values.
 */
export const postSettingsTautulli = (options: Options<PostSettingsTautulliData>) => { return (options?.client ?? client).post<PostSettingsTautulliResponse, PostSettingsTautulliError>({
    ...options,
    url: '/settings/tautulli'
}); };

/**
 * Get Radarr settings
 * Returns all Radarr settings in a JSON array.
 */
export const getSettingsRadarr = (options?: Options) => { return (options?.client ?? client).get<GetSettingsRadarrResponse, GetSettingsRadarrError>({
    ...options,
    url: '/settings/radarr'
}); };

/**
 * Create Radarr instance
 * Creates a new Radarr instance from the request body.
 */
export const postSettingsRadarr = (options: Options<PostSettingsRadarrData>) => { return (options?.client ?? client).post<PostSettingsRadarrResponse, PostSettingsRadarrError>({
    ...options,
    url: '/settings/radarr'
}); };

/**
 * Test Radarr configuration
 * Tests if the Radarr configuration is valid. Returns profiles and root folders on success.
 */
export const postSettingsRadarrTest = (options: Options<PostSettingsRadarrTestData>) => { return (options?.client ?? client).post<PostSettingsRadarrTestResponse, PostSettingsRadarrTestError>({
    ...options,
    url: '/settings/radarr/test'
}); };

/**
 * Update Radarr instance
 * Updates an existing Radarr instance with the provided values.
 */
export const putSettingsRadarrByRadarrId = (options: Options<PutSettingsRadarrByRadarrIdData>) => { return (options?.client ?? client).put<PutSettingsRadarrByRadarrIdResponse, PutSettingsRadarrByRadarrIdError>({
    ...options,
    url: '/settings/radarr/{radarrId}'
}); };

/**
 * Delete Radarr instance
 * Deletes an existing Radarr instance based on the radarrId parameter.
 */
export const deleteSettingsRadarrByRadarrId = (options: Options<DeleteSettingsRadarrByRadarrIdData>) => { return (options?.client ?? client).delete<DeleteSettingsRadarrByRadarrIdResponse, DeleteSettingsRadarrByRadarrIdError>({
    ...options,
    url: '/settings/radarr/{radarrId}'
}); };

/**
 * Get available Radarr profiles
 * Returns a list of profiles available on the Radarr server instance in a JSON array.
 */
export const getSettingsRadarrByRadarrIdProfiles = (options: Options<GetSettingsRadarrByRadarrIdProfilesData>) => { return (options?.client ?? client).get<GetSettingsRadarrByRadarrIdProfilesResponse, GetSettingsRadarrByRadarrIdProfilesError>({
    ...options,
    url: '/settings/radarr/{radarrId}/profiles'
}); };

/**
 * Get Sonarr settings
 * Returns all Sonarr settings in a JSON array.
 */
export const getSettingsSonarr = (options?: Options) => { return (options?.client ?? client).get<GetSettingsSonarrResponse, GetSettingsSonarrError>({
    ...options,
    url: '/settings/sonarr'
}); };

/**
 * Create Sonarr instance
 * Creates a new Sonarr instance from the request body.
 */
export const postSettingsSonarr = (options: Options<PostSettingsSonarrData>) => { return (options?.client ?? client).post<PostSettingsSonarrResponse, PostSettingsSonarrError>({
    ...options,
    url: '/settings/sonarr'
}); };

/**
 * Test Sonarr configuration
 * Tests if the Sonarr configuration is valid. Returns profiles and root folders on success.
 */
export const postSettingsSonarrTest = (options: Options<PostSettingsSonarrTestData>) => { return (options?.client ?? client).post<PostSettingsSonarrTestResponse, PostSettingsSonarrTestError>({
    ...options,
    url: '/settings/sonarr/test'
}); };

/**
 * Update Sonarr instance
 * Updates an existing Sonarr instance with the provided values.
 */
export const putSettingsSonarrBySonarrId = (options: Options<PutSettingsSonarrBySonarrIdData>) => { return (options?.client ?? client).put<PutSettingsSonarrBySonarrIdResponse, PutSettingsSonarrBySonarrIdError>({
    ...options,
    url: '/settings/sonarr/{sonarrId}'
}); };

/**
 * Delete Sonarr instance
 * Deletes an existing Sonarr instance based on the sonarrId parameter.
 */
export const deleteSettingsSonarrBySonarrId = (options: Options<DeleteSettingsSonarrBySonarrIdData>) => { return (options?.client ?? client).delete<DeleteSettingsSonarrBySonarrIdResponse, DeleteSettingsSonarrBySonarrIdError>({
    ...options,
    url: '/settings/sonarr/{sonarrId}'
}); };

/**
 * Get public settings
 * Returns settings that are not protected or sensitive. Mainly used to determine if the application has been configured for the first time.
 */
export const getSettingsPublic = (options?: Options) => { return (options?.client ?? client).get<GetSettingsPublicResponse, GetSettingsPublicError>({
    ...options,
    url: '/settings/public'
}); };

/**
 * Initialize application
 * Sets the app as initialized, allowing the user to navigate to pages other than the setup page.
 */
export const postSettingsInitialize = (options?: Options) => { return (options?.client ?? client).post<PostSettingsInitializeResponse, PostSettingsInitializeError>({
    ...options,
    url: '/settings/initialize'
}); };

/**
 * Get scheduled jobs
 * Returns list of all scheduled jobs and details about their next execution time in a JSON array.
 */
export const getSettingsJobs = (options?: Options) => { return (options?.client ?? client).get<GetSettingsJobsResponse, GetSettingsJobsError>({
    ...options,
    url: '/settings/jobs'
}); };

/**
 * Invoke a specific job
 * Invokes a specific job to run. Will return the new job status in JSON format.
 */
export const postSettingsJobsByJobIdRun = (options: Options<PostSettingsJobsByJobIdRunData>) => { return (options?.client ?? client).post<PostSettingsJobsByJobIdRunResponse, PostSettingsJobsByJobIdRunError>({
    ...options,
    url: '/settings/jobs/{jobId}/run'
}); };

/**
 * Cancel a specific job
 * Cancels a specific job. Will return the new job status in JSON format.
 */
export const postSettingsJobsByJobIdCancel = (options: Options<PostSettingsJobsByJobIdCancelData>) => { return (options?.client ?? client).post<PostSettingsJobsByJobIdCancelResponse, PostSettingsJobsByJobIdCancelError>({
    ...options,
    url: '/settings/jobs/{jobId}/cancel'
}); };

/**
 * Modify job schedule
 * Re-registers the job with the schedule specified. Will return the job in JSON format.
 */
export const postSettingsJobsByJobIdSchedule = (options: Options<PostSettingsJobsByJobIdScheduleData>) => { return (options?.client ?? client).post<PostSettingsJobsByJobIdScheduleResponse, PostSettingsJobsByJobIdScheduleError>({
    ...options,
    url: '/settings/jobs/{jobId}/schedule'
}); };

/**
 * Get a list of active caches
 * Retrieves a list of all active caches and their current stats.
 */
export const getSettingsCache = (options?: Options) => { return (options?.client ?? client).get<GetSettingsCacheResponse, GetSettingsCacheError>({
    ...options,
    url: '/settings/cache'
}); };

/**
 * Flush a specific cache
 * Flushes all data from the cache ID provided
 */
export const postSettingsCacheByCacheIdFlush = (options: Options<PostSettingsCacheByCacheIdFlushData>) => { return (options?.client ?? client).post<PostSettingsCacheByCacheIdFlushResponse, PostSettingsCacheByCacheIdFlushError>({
    ...options,
    url: '/settings/cache/{cacheId}/flush'
}); };

/**
 * Returns logs
 * Returns list of all log items and details
 */
export const getSettingsLogs = (options?: Options<GetSettingsLogsData>) => { return (options?.client ?? client).get<GetSettingsLogsResponse, GetSettingsLogsError>({
    ...options,
    url: '/settings/logs'
}); };

/**
 * Get email notification settings
 * Returns current email notification settings in a JSON object.
 */
export const getSettingsNotificationsEmail = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsEmailResponse, GetSettingsNotificationsEmailError>({
    ...options,
    url: '/settings/notifications/email'
}); };

/**
 * Update email notification settings
 * Updates email notification settings with provided values
 */
export const postSettingsNotificationsEmail = (options: Options<PostSettingsNotificationsEmailData>) => { return (options?.client ?? client).post<PostSettingsNotificationsEmailResponse, PostSettingsNotificationsEmailError>({
    ...options,
    url: '/settings/notifications/email'
}); };

/**
 * Test email settings
 * Sends a test notification to the email agent.
 */
export const postSettingsNotificationsEmailTest = (options: Options<PostSettingsNotificationsEmailTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsEmailTestResponse, PostSettingsNotificationsEmailTestError>({
    ...options,
    url: '/settings/notifications/email/test'
}); };

/**
 * Get Discord notification settings
 * Returns current Discord notification settings in a JSON object.
 */
export const getSettingsNotificationsDiscord = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsDiscordResponse, GetSettingsNotificationsDiscordError>({
    ...options,
    url: '/settings/notifications/discord'
}); };

/**
 * Update Discord notification settings
 * Updates Discord notification settings with the provided values.
 */
export const postSettingsNotificationsDiscord = (options: Options<PostSettingsNotificationsDiscordData>) => { return (options?.client ?? client).post<PostSettingsNotificationsDiscordResponse, PostSettingsNotificationsDiscordError>({
    ...options,
    url: '/settings/notifications/discord'
}); };

/**
 * Test Discord settings
 * Sends a test notification to the Discord agent.
 */
export const postSettingsNotificationsDiscordTest = (options: Options<PostSettingsNotificationsDiscordTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsDiscordTestResponse, PostSettingsNotificationsDiscordTestError>({
    ...options,
    url: '/settings/notifications/discord/test'
}); };

/**
 * Get LunaSea notification settings
 * Returns current LunaSea notification settings in a JSON object.
 */
export const getSettingsNotificationsLunasea = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsLunaseaResponse, GetSettingsNotificationsLunaseaError>({
    ...options,
    url: '/settings/notifications/lunasea'
}); };

/**
 * Update LunaSea notification settings
 * Updates LunaSea notification settings with the provided values.
 */
export const postSettingsNotificationsLunasea = (options: Options<PostSettingsNotificationsLunaseaData>) => { return (options?.client ?? client).post<PostSettingsNotificationsLunaseaResponse, PostSettingsNotificationsLunaseaError>({
    ...options,
    url: '/settings/notifications/lunasea'
}); };

/**
 * Test LunaSea settings
 * Sends a test notification to the LunaSea agent.
 */
export const postSettingsNotificationsLunaseaTest = (options: Options<PostSettingsNotificationsLunaseaTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsLunaseaTestResponse, PostSettingsNotificationsLunaseaTestError>({
    ...options,
    url: '/settings/notifications/lunasea/test'
}); };

/**
 * Get Pushbullet notification settings
 * Returns current Pushbullet notification settings in a JSON object.
 */
export const getSettingsNotificationsPushbullet = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsPushbulletResponse, GetSettingsNotificationsPushbulletError>({
    ...options,
    url: '/settings/notifications/pushbullet'
}); };

/**
 * Update Pushbullet notification settings
 * Update Pushbullet notification settings with the provided values.
 */
export const postSettingsNotificationsPushbullet = (options: Options<PostSettingsNotificationsPushbulletData>) => { return (options?.client ?? client).post<PostSettingsNotificationsPushbulletResponse, PostSettingsNotificationsPushbulletError>({
    ...options,
    url: '/settings/notifications/pushbullet'
}); };

/**
 * Test Pushbullet settings
 * Sends a test notification to the Pushbullet agent.
 */
export const postSettingsNotificationsPushbulletTest = (options: Options<PostSettingsNotificationsPushbulletTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsPushbulletTestResponse, PostSettingsNotificationsPushbulletTestError>({
    ...options,
    url: '/settings/notifications/pushbullet/test'
}); };

/**
 * Get Pushover notification settings
 * Returns current Pushover notification settings in a JSON object.
 */
export const getSettingsNotificationsPushover = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsPushoverResponse, GetSettingsNotificationsPushoverError>({
    ...options,
    url: '/settings/notifications/pushover'
}); };

/**
 * Update Pushover notification settings
 * Update Pushover notification settings with the provided values.
 */
export const postSettingsNotificationsPushover = (options: Options<PostSettingsNotificationsPushoverData>) => { return (options?.client ?? client).post<PostSettingsNotificationsPushoverResponse, PostSettingsNotificationsPushoverError>({
    ...options,
    url: '/settings/notifications/pushover'
}); };

/**
 * Test Pushover settings
 * Sends a test notification to the Pushover agent.
 */
export const postSettingsNotificationsPushoverTest = (options: Options<PostSettingsNotificationsPushoverTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsPushoverTestResponse, PostSettingsNotificationsPushoverTestError>({
    ...options,
    url: '/settings/notifications/pushover/test'
}); };

/**
 * Get Pushover sounds
 * Returns valid Pushover sound options in a JSON array.
 */
export const getSettingsNotificationsPushoverSounds = (options: Options<GetSettingsNotificationsPushoverSoundsData>) => { return (options?.client ?? client).get<GetSettingsNotificationsPushoverSoundsResponse, GetSettingsNotificationsPushoverSoundsError>({
    ...options,
    url: '/settings/notifications/pushover/sounds'
}); };

/**
 * Get Gotify notification settings
 * Returns current Gotify notification settings in a JSON object.
 */
export const getSettingsNotificationsGotify = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsGotifyResponse, GetSettingsNotificationsGotifyError>({
    ...options,
    url: '/settings/notifications/gotify'
}); };

/**
 * Update Gotify notification settings
 * Update Gotify notification settings with the provided values.
 */
export const postSettingsNotificationsGotify = (options: Options<PostSettingsNotificationsGotifyData>) => { return (options?.client ?? client).post<PostSettingsNotificationsGotifyResponse, PostSettingsNotificationsGotifyError>({
    ...options,
    url: '/settings/notifications/gotify'
}); };

/**
 * Test Gotify settings
 * Sends a test notification to the Gotify agent.
 */
export const postSettingsNotificationsGotifyTest = (options: Options<PostSettingsNotificationsGotifyTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsGotifyTestResponse, PostSettingsNotificationsGotifyTestError>({
    ...options,
    url: '/settings/notifications/gotify/test'
}); };

/**
 * Get Slack notification settings
 * Returns current Slack notification settings in a JSON object.
 */
export const getSettingsNotificationsSlack = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsSlackResponse, GetSettingsNotificationsSlackError>({
    ...options,
    url: '/settings/notifications/slack'
}); };

/**
 * Update Slack notification settings
 * Updates Slack notification settings with the provided values.
 */
export const postSettingsNotificationsSlack = (options: Options<PostSettingsNotificationsSlackData>) => { return (options?.client ?? client).post<PostSettingsNotificationsSlackResponse, PostSettingsNotificationsSlackError>({
    ...options,
    url: '/settings/notifications/slack'
}); };

/**
 * Test Slack settings
 * Sends a test notification to the Slack agent.
 */
export const postSettingsNotificationsSlackTest = (options: Options<PostSettingsNotificationsSlackTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsSlackTestResponse, PostSettingsNotificationsSlackTestError>({
    ...options,
    url: '/settings/notifications/slack/test'
}); };

/**
 * Get Telegram notification settings
 * Returns current Telegram notification settings in a JSON object.
 */
export const getSettingsNotificationsTelegram = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsTelegramResponse, GetSettingsNotificationsTelegramError>({
    ...options,
    url: '/settings/notifications/telegram'
}); };

/**
 * Update Telegram notification settings
 * Update Telegram notification settings with the provided values.
 */
export const postSettingsNotificationsTelegram = (options: Options<PostSettingsNotificationsTelegramData>) => { return (options?.client ?? client).post<PostSettingsNotificationsTelegramResponse, PostSettingsNotificationsTelegramError>({
    ...options,
    url: '/settings/notifications/telegram'
}); };

/**
 * Test Telegram settings
 * Sends a test notification to the Telegram agent.
 */
export const postSettingsNotificationsTelegramTest = (options: Options<PostSettingsNotificationsTelegramTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsTelegramTestResponse, PostSettingsNotificationsTelegramTestError>({
    ...options,
    url: '/settings/notifications/telegram/test'
}); };

/**
 * Get Web Push notification settings
 * Returns current Web Push notification settings in a JSON object.
 */
export const getSettingsNotificationsWebpush = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsWebpushResponse, GetSettingsNotificationsWebpushError>({
    ...options,
    url: '/settings/notifications/webpush'
}); };

/**
 * Update Web Push notification settings
 * Updates Web Push notification settings with the provided values.
 */
export const postSettingsNotificationsWebpush = (options: Options<PostSettingsNotificationsWebpushData>) => { return (options?.client ?? client).post<PostSettingsNotificationsWebpushResponse, PostSettingsNotificationsWebpushError>({
    ...options,
    url: '/settings/notifications/webpush'
}); };

/**
 * Test Web Push settings
 * Sends a test notification to the Web Push agent.
 */
export const postSettingsNotificationsWebpushTest = (options: Options<PostSettingsNotificationsWebpushTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsWebpushTestResponse, PostSettingsNotificationsWebpushTestError>({
    ...options,
    url: '/settings/notifications/webpush/test'
}); };

/**
 * Get webhook notification settings
 * Returns current webhook notification settings in a JSON object.
 */
export const getSettingsNotificationsWebhook = (options?: Options) => { return (options?.client ?? client).get<GetSettingsNotificationsWebhookResponse, GetSettingsNotificationsWebhookError>({
    ...options,
    url: '/settings/notifications/webhook'
}); };

/**
 * Update webhook notification settings
 * Updates webhook notification settings with the provided values.
 */
export const postSettingsNotificationsWebhook = (options: Options<PostSettingsNotificationsWebhookData>) => { return (options?.client ?? client).post<PostSettingsNotificationsWebhookResponse, PostSettingsNotificationsWebhookError>({
    ...options,
    url: '/settings/notifications/webhook'
}); };

/**
 * Test webhook settings
 * Sends a test notification to the webhook agent.
 */
export const postSettingsNotificationsWebhookTest = (options: Options<PostSettingsNotificationsWebhookTestData>) => { return (options?.client ?? client).post<PostSettingsNotificationsWebhookTestResponse, PostSettingsNotificationsWebhookTestError>({
    ...options,
    url: '/settings/notifications/webhook/test'
}); };

/**
 * Get all discover sliders
 * Returns all discovery sliders. Built-in and custom made.
 */
export const getSettingsDiscover = (options?: Options) => { return (options?.client ?? client).get<GetSettingsDiscoverResponse, GetSettingsDiscoverError>({
    ...options,
    url: '/settings/discover'
}); };

/**
 * Batch update all sliders.
 * Batch update all sliders at once. Should also be used for creation. Will only update sliders provided
 * and will not delete any sliders not present in the request. If a slider is missing a required field,
 * it will be ignored. Requires the `ADMIN` permission.
 *
 */
export const postSettingsDiscover = (options: Options<PostSettingsDiscoverData>) => { return (options?.client ?? client).post<PostSettingsDiscoverResponse, PostSettingsDiscoverError>({
    ...options,
    url: '/settings/discover'
}); };

/**
 * Update a single slider
 * Updates a single slider and return the newly updated slider. Requires the `ADMIN` permission.
 *
 */
export const putSettingsDiscoverBySliderId = (options: Options<PutSettingsDiscoverBySliderIdData>) => { return (options?.client ?? client).put<PutSettingsDiscoverBySliderIdResponse, PutSettingsDiscoverBySliderIdError>({
    ...options,
    url: '/settings/discover/{sliderId}'
}); };

/**
 * Delete slider by ID
 * Deletes the slider with the provided sliderId. Requires the `ADMIN` permission.
 */
export const deleteSettingsDiscoverBySliderId = (options: Options<DeleteSettingsDiscoverBySliderIdData>) => { return (options?.client ?? client).delete<DeleteSettingsDiscoverBySliderIdResponse, DeleteSettingsDiscoverBySliderIdError>({
    ...options,
    url: '/settings/discover/{sliderId}'
}); };

/**
 * Add a new slider
 * Add a single slider and return the newly created slider. Requires the `ADMIN` permission.
 *
 */
export const postSettingsDiscoverAdd = (options: Options<PostSettingsDiscoverAddData>) => { return (options?.client ?? client).post<PostSettingsDiscoverAddResponse, PostSettingsDiscoverAddError>({
    ...options,
    url: '/settings/discover/add'
}); };

/**
 * Reset all discover sliders
 * Resets all discovery sliders to the default values. Requires the `ADMIN` permission.
 */
export const getSettingsDiscoverReset = (options?: Options) => { return (options?.client ?? client).get<GetSettingsDiscoverResetResponse, GetSettingsDiscoverResetError>({
    ...options,
    url: '/settings/discover/reset'
}); };

/**
 * Get server stats
 * Returns current server stats in a JSON object.
 */
export const getSettingsAbout = (options?: Options) => { return (options?.client ?? client).get<GetSettingsAboutResponse, GetSettingsAboutError>({
    ...options,
    url: '/settings/about'
}); };

/**
 * Get logged-in user
 * Returns the currently logged-in user.
 */
export const getAuthMe = (options?: Options) => { return (options?.client ?? client).get<GetAuthMeResponse, GetAuthMeError>({
    ...options,
    url: '/auth/me'
}); };

/**
 * Sign in using a Plex token
 * Takes an `authToken` (Plex token) to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the main Plex server, they will also have an account created, but without any permissions.
 */
export const postAuthPlex = (options: Options<PostAuthPlexData>) => { return (options?.client ?? client).post<PostAuthPlexResponse, PostAuthPlexError>({
    ...options,
    url: '/auth/plex'
}); };

/**
 * Sign in using a local account
 * Takes an `email` and a `password` to log the user in. Generates a session cookie for use in further requests.
 */
export const postAuthLocal = (options: Options<PostAuthLocalData>) => { return (options?.client ?? client).post<PostAuthLocalResponse, PostAuthLocalError>({
    ...options,
    url: '/auth/local'
}); };

/**
 * Sign out and clear session cookie
 * Completely clear the session cookie and associated values, effectively signing the user out.
 */
export const postAuthLogout = (options?: Options) => { return (options?.client ?? client).post<PostAuthLogoutResponse, PostAuthLogoutError>({
    ...options,
    url: '/auth/logout'
}); };

/**
 * Send a reset password email
 * Sends a reset password email to the email if the user exists
 */
export const postAuthResetPassword = (options: Options<PostAuthResetPasswordData>) => { return (options?.client ?? client).post<PostAuthResetPasswordResponse, PostAuthResetPasswordError>({
    ...options,
    url: '/auth/reset-password'
}); };

/**
 * Reset the password for a user
 * Resets the password for a user if the given guid is connected to a user
 */
export const postAuthResetPasswordByGuid = (options: Options<PostAuthResetPasswordByGuidData>) => { return (options?.client ?? client).post<PostAuthResetPasswordByGuidResponse, PostAuthResetPasswordByGuidError>({
    ...options,
    url: '/auth/reset-password/{guid}'
}); };

/**
 * Get all users
 * Returns all users in a JSON object.
 */
export const getUser = (options?: Options<GetUserData>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError>({
    ...options,
    url: '/user'
}); };

/**
 * Create new user
 * Creates a new user. Requires the `MANAGE_USERS` permission.
 *
 */
export const postUser = (options: Options<PostUserData>) => { return (options?.client ?? client).post<PostUserResponse, PostUserError>({
    ...options,
    url: '/user'
}); };

/**
 * Update batch of users
 * Update users with given IDs with provided values in request `body.settings`. You cannot update users' Plex tokens through this request.
 *
 * Requires the `MANAGE_USERS` permission.
 *
 */
export const putUser = (options: Options<PutUserData>) => { return (options?.client ?? client).put<PutUserResponse, PutUserError>({
    ...options,
    url: '/user'
}); };

/**
 * Import all users from Plex
 * Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.
 *
 * Requires the `MANAGE_USERS` permission.
 *
 */
export const postUserImportFromPlex = (options?: Options<PostUserImportFromPlexData>) => { return (options?.client ?? client).post<PostUserImportFromPlexResponse, PostUserImportFromPlexError>({
    ...options,
    url: '/user/import-from-plex'
}); };

/**
 * Register a web push /user/registerPushSubscription
 * Registers a web push subscription for the logged-in user
 */
export const postUserRegisterPushSubscription = (options: Options<PostUserRegisterPushSubscriptionData>) => { return (options?.client ?? client).post<PostUserRegisterPushSubscriptionResponse, PostUserRegisterPushSubscriptionError>({
    ...options,
    url: '/user/registerPushSubscription'
}); };

/**
 * Get user by ID
 * Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.
 *
 */
export const getUserByUserId = (options: Options<GetUserByUserIdData>) => { return (options?.client ?? client).get<GetUserByUserIdResponse, GetUserByUserIdError>({
    ...options,
    url: '/user/{userId}'
}); };

/**
 * Update a user by user ID
 * Update a user with the provided values. You cannot update a user's Plex token through this request.
 *
 * Requires the `MANAGE_USERS` permission.
 *
 */
export const putUserByUserId = (options: Options<PutUserByUserIdData>) => { return (options?.client ?? client).put<PutUserByUserIdResponse, PutUserByUserIdError>({
    ...options,
    url: '/user/{userId}'
}); };

/**
 * Delete user by ID
 * Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.
 */
export const deleteUserByUserId = (options: Options<DeleteUserByUserIdData>) => { return (options?.client ?? client).delete<DeleteUserByUserIdResponse, DeleteUserByUserIdError>({
    ...options,
    url: '/user/{userId}'
}); };

/**
 * Get requests for a specific user
 * Retrieves a user's requests in a JSON object.
 *
 */
export const getUserByUserIdRequests = (options: Options<GetUserByUserIdRequestsData>) => { return (options?.client ?? client).get<GetUserByUserIdRequestsResponse, GetUserByUserIdRequestsError>({
    ...options,
    url: '/user/{userId}/requests'
}); };

/**
 * Get quotas for a specific user
 * Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.
 *
 */
export const getUserByUserIdQuota = (options: Options<GetUserByUserIdQuotaData>) => { return (options?.client ?? client).get<GetUserByUserIdQuotaResponse, GetUserByUserIdQuotaError>({
    ...options,
    url: '/user/{userId}/quota'
}); };

/**
 * Get the Plex watchlist for a specific user
 * Retrieves a user's Plex Watchlist in a JSON object.
 *
 */
export const getUserByUserIdWatchlist = (options: Options<GetUserByUserIdWatchlistData>) => { return (options?.client ?? client).get<GetUserByUserIdWatchlistResponse, GetUserByUserIdWatchlistError>({
    ...options,
    url: '/user/{userId}/watchlist'
}); };

/**
 * Get general settings for a user
 * Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
 */
export const getUserByUserIdSettingsMain = (options: Options<GetUserByUserIdSettingsMainData>) => { return (options?.client ?? client).get<GetUserByUserIdSettingsMainResponse, GetUserByUserIdSettingsMainError>({
    ...options,
    url: '/user/{userId}/settings/main'
}); };

/**
 * Update general settings for a user
 * Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
 */
export const postUserByUserIdSettingsMain = (options: Options<PostUserByUserIdSettingsMainData>) => { return (options?.client ?? client).post<PostUserByUserIdSettingsMainResponse, PostUserByUserIdSettingsMainError>({
    ...options,
    url: '/user/{userId}/settings/main'
}); };

/**
 * Get password page informatiom
 * Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.
 */
export const getUserByUserIdSettingsPassword = (options: Options<GetUserByUserIdSettingsPasswordData>) => { return (options?.client ?? client).get<GetUserByUserIdSettingsPasswordResponse, GetUserByUserIdSettingsPasswordError>({
    ...options,
    url: '/user/{userId}/settings/password'
}); };

/**
 * Update password for a user
 * Updates a user's password. Requires `MANAGE_USERS` permission if editing other users.
 */
export const postUserByUserIdSettingsPassword = (options: Options<PostUserByUserIdSettingsPasswordData>) => { return (options?.client ?? client).post<PostUserByUserIdSettingsPasswordResponse, PostUserByUserIdSettingsPasswordError>({
    ...options,
    url: '/user/{userId}/settings/password'
}); };

/**
 * Get notification settings for a user
 * Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
 */
export const getUserByUserIdSettingsNotifications = (options: Options<GetUserByUserIdSettingsNotificationsData>) => { return (options?.client ?? client).get<GetUserByUserIdSettingsNotificationsResponse, GetUserByUserIdSettingsNotificationsError>({
    ...options,
    url: '/user/{userId}/settings/notifications'
}); };

/**
 * Update notification settings for a user
 * Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
 */
export const postUserByUserIdSettingsNotifications = (options: Options<PostUserByUserIdSettingsNotificationsData>) => { return (options?.client ?? client).post<PostUserByUserIdSettingsNotificationsResponse, PostUserByUserIdSettingsNotificationsError>({
    ...options,
    url: '/user/{userId}/settings/notifications'
}); };

/**
 * Get permission settings for a user
 * Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
 */
export const getUserByUserIdSettingsPermissions = (options: Options<GetUserByUserIdSettingsPermissionsData>) => { return (options?.client ?? client).get<GetUserByUserIdSettingsPermissionsResponse, GetUserByUserIdSettingsPermissionsError>({
    ...options,
    url: '/user/{userId}/settings/permissions'
}); };

/**
 * Update permission settings for a user
 * Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
 */
export const postUserByUserIdSettingsPermissions = (options: Options<PostUserByUserIdSettingsPermissionsData>) => { return (options?.client ?? client).post<PostUserByUserIdSettingsPermissionsResponse, PostUserByUserIdSettingsPermissionsError>({
    ...options,
    url: '/user/{userId}/settings/permissions'
}); };

/**
 * Get watch data
 * Returns play count, play duration, and recently watched media.
 *
 * Requires the `ADMIN` permission to fetch results for other users.
 *
 */
export const getUserByUserIdWatchData = (options: Options<GetUserByUserIdWatchDataData>) => { return (options?.client ?? client).get<GetUserByUserIdWatchDataResponse, GetUserByUserIdWatchDataError>({
    ...options,
    url: '/user/{userId}/watch_data'
}); };

/**
 * Search for movies, TV shows, or people
 * Returns a list of movies, TV shows, or people a JSON object.
 */
export const getSearch = (options: Options<GetSearchData>) => { return (options?.client ?? client).get<GetSearchResponse, GetSearchError>({
    ...options,
    url: '/search'
}); };

/**
 * Search for keywords
 * Returns a list of TMDB keywords matching the search query
 */
export const getSearchKeyword = (options: Options<GetSearchKeywordData>) => { return (options?.client ?? client).get<GetSearchKeywordResponse, GetSearchKeywordError>({
    ...options,
    url: '/search/keyword'
}); };

/**
 * Search for companies
 * Returns a list of TMDB companies matching the search query. (Will not return origin country)
 */
export const getSearchCompany = (options: Options<GetSearchCompanyData>) => { return (options?.client ?? client).get<GetSearchCompanyResponse, GetSearchCompanyError>({
    ...options,
    url: '/search/company'
}); };

/**
 * Discover movies
 * Returns a list of movies in a JSON object.
 */
export const getDiscoverMovies = (options?: Options<GetDiscoverMoviesData>) => { return (options?.client ?? client).get<GetDiscoverMoviesResponse, GetDiscoverMoviesError>({
    ...options,
    url: '/discover/movies'
}); };

/**
 * Discover movies by genre
 * Returns a list of movies based on the provided genre ID in a JSON object.
 */
export const getDiscoverMoviesGenreByGenreId = (options: Options<GetDiscoverMoviesGenreByGenreIdData>) => { return (options?.client ?? client).get<GetDiscoverMoviesGenreByGenreIdResponse, GetDiscoverMoviesGenreByGenreIdError>({
    ...options,
    url: '/discover/movies/genre/{genreId}'
}); };

/**
 * Discover movies by original language
 * Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
 */
export const getDiscoverMoviesLanguageByLanguage = (options: Options<GetDiscoverMoviesLanguageByLanguageData>) => { return (options?.client ?? client).get<GetDiscoverMoviesLanguageByLanguageResponse, GetDiscoverMoviesLanguageByLanguageError>({
    ...options,
    url: '/discover/movies/language/{language}'
}); };

/**
 * Discover movies by studio
 * Returns a list of movies based on the provided studio ID in a JSON object.
 */
export const getDiscoverMoviesStudioByStudioId = (options: Options<GetDiscoverMoviesStudioByStudioIdData>) => { return (options?.client ?? client).get<GetDiscoverMoviesStudioByStudioIdResponse, GetDiscoverMoviesStudioByStudioIdError>({
    ...options,
    url: '/discover/movies/studio/{studioId}'
}); };

/**
 * Upcoming movies
 * Returns a list of movies in a JSON object.
 */
export const getDiscoverMoviesUpcoming = (options?: Options<GetDiscoverMoviesUpcomingData>) => { return (options?.client ?? client).get<GetDiscoverMoviesUpcomingResponse, GetDiscoverMoviesUpcomingError>({
    ...options,
    url: '/discover/movies/upcoming'
}); };

/**
 * Discover TV shows
 * Returns a list of TV shows in a JSON object.
 */
export const getDiscoverTv = (options?: Options<GetDiscoverTvData>) => { return (options?.client ?? client).get<GetDiscoverTvResponse, GetDiscoverTvError>({
    ...options,
    url: '/discover/tv'
}); };

/**
 * Discover TV shows by original language
 * Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
 */
export const getDiscoverTvLanguageByLanguage = (options: Options<GetDiscoverTvLanguageByLanguageData>) => { return (options?.client ?? client).get<GetDiscoverTvLanguageByLanguageResponse, GetDiscoverTvLanguageByLanguageError>({
    ...options,
    url: '/discover/tv/language/{language}'
}); };

/**
 * Discover TV shows by genre
 * Returns a list of TV shows based on the provided genre ID in a JSON object.
 */
export const getDiscoverTvGenreByGenreId = (options: Options<GetDiscoverTvGenreByGenreIdData>) => { return (options?.client ?? client).get<GetDiscoverTvGenreByGenreIdResponse, GetDiscoverTvGenreByGenreIdError>({
    ...options,
    url: '/discover/tv/genre/{genreId}'
}); };

/**
 * Discover TV shows by network
 * Returns a list of TV shows based on the provided network ID in a JSON object.
 */
export const getDiscoverTvNetworkByNetworkId = (options: Options<GetDiscoverTvNetworkByNetworkIdData>) => { return (options?.client ?? client).get<GetDiscoverTvNetworkByNetworkIdResponse, GetDiscoverTvNetworkByNetworkIdError>({
    ...options,
    url: '/discover/tv/network/{networkId}'
}); };

/**
 * Discover Upcoming TV shows
 * Returns a list of upcoming TV shows in a JSON object.
 */
export const getDiscoverTvUpcoming = (options?: Options<GetDiscoverTvUpcomingData>) => { return (options?.client ?? client).get<GetDiscoverTvUpcomingResponse, GetDiscoverTvUpcomingError>({
    ...options,
    url: '/discover/tv/upcoming'
}); };

/**
 * Trending movies and TV
 * Returns a list of movies and TV shows in a JSON object.
 */
export const getDiscoverTrending = (options?: Options<GetDiscoverTrendingData>) => { return (options?.client ?? client).get<GetDiscoverTrendingResponse, GetDiscoverTrendingError>({
    ...options,
    url: '/discover/trending'
}); };

/**
 * Get movies from keyword
 * Returns list of movies based on the provided keyword ID a JSON object.
 */
export const getDiscoverKeywordByKeywordIdMovies = (options: Options<GetDiscoverKeywordByKeywordIdMoviesData>) => { return (options?.client ?? client).get<GetDiscoverKeywordByKeywordIdMoviesResponse, GetDiscoverKeywordByKeywordIdMoviesError>({
    ...options,
    url: '/discover/keyword/{keywordId}/movies'
}); };

/**
 * Get genre slider data for movies
 * Returns a list of genres with backdrops attached
 */
export const getDiscoverGenresliderMovie = (options?: Options<GetDiscoverGenresliderMovieData>) => { return (options?.client ?? client).get<GetDiscoverGenresliderMovieResponse, GetDiscoverGenresliderMovieError>({
    ...options,
    url: '/discover/genreslider/movie'
}); };

/**
 * Get genre slider data for TV series
 * Returns a list of genres with backdrops attached
 */
export const getDiscoverGenresliderTv = (options?: Options<GetDiscoverGenresliderTvData>) => { return (options?.client ?? client).get<GetDiscoverGenresliderTvResponse, GetDiscoverGenresliderTvError>({
    ...options,
    url: '/discover/genreslider/tv'
}); };

/**
 * Get the Plex watchlist.
 */
export const getDiscoverWatchlist = (options?: Options<GetDiscoverWatchlistData>) => { return (options?.client ?? client).get<GetDiscoverWatchlistResponse, GetDiscoverWatchlistError>({
    ...options,
    url: '/discover/watchlist'
}); };

/**
 * Get all requests
 * Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user's requests are returned.
 *
 * If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
 *
 */
export const getRequest = (options?: Options<GetRequestData>) => { return (options?.client ?? client).get<GetRequestResponse, GetRequestError>({
    ...options,
    url: '/request'
}); };

/**
 * Create new request
 * Creates a new request with the provided media ID and type. The `REQUEST` permission is required.
 *
 * If the user has the `ADMIN` or `AUTO_APPROVE` permissions, their request will be auomatically approved.
 *
 */
export const postRequest = (options: Options<PostRequestData>) => { return (options?.client ?? client).post<PostRequestResponse, PostRequestError>({
    ...options,
    url: '/request'
}); };

/**
 * Gets request counts
 * Returns the number of pending and approved requests.
 *
 */
export const getRequestCount = (options?: Options) => { return (options?.client ?? client).get<GetRequestCountResponse, GetRequestCountError>({
    ...options,
    url: '/request/count'
}); };

/**
 * Get MediaRequest
 * Returns a specific MediaRequest in a JSON object.
 */
export const getRequestByRequestId = (options: Options<GetRequestByRequestIdData>) => { return (options?.client ?? client).get<GetRequestByRequestIdResponse, GetRequestByRequestIdError>({
    ...options,
    url: '/request/{requestId}'
}); };

/**
 * Update MediaRequest
 * Updates a specific media request and returns the request in a JSON object. Requires the `MANAGE_REQUESTS` permission.
 */
export const putRequestByRequestId = (options: Options<PutRequestByRequestIdData>) => { return (options?.client ?? client).put<PutRequestByRequestIdResponse, PutRequestByRequestIdError>({
    ...options,
    url: '/request/{requestId}'
}); };

/**
 * Delete request
 * Removes a request. If the user has the `MANAGE_REQUESTS` permission, any request can be removed. Otherwise, only pending requests can be removed.
 */
export const deleteRequestByRequestId = (options: Options<DeleteRequestByRequestIdData>) => { return (options?.client ?? client).delete<DeleteRequestByRequestIdResponse, DeleteRequestByRequestIdError>({
    ...options,
    url: '/request/{requestId}'
}); };

/**
 * Retry failed request
 * Retries a request by resending requests to Sonarr or Radarr.
 *
 * Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
 *
 */
export const postRequestByRequestIdRetry = (options: Options<PostRequestByRequestIdRetryData>) => { return (options?.client ?? client).post<PostRequestByRequestIdRetryResponse, PostRequestByRequestIdRetryError>({
    ...options,
    url: '/request/{requestId}/retry'
}); };

/**
 * Update a request's status
 * Updates a request's status to approved or declined. Also returns the request in a JSON object.
 *
 * Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
 *
 */
export const postRequestByRequestIdByStatus = (options: Options<PostRequestByRequestIdByStatusData>) => { return (options?.client ?? client).post<PostRequestByRequestIdByStatusResponse, PostRequestByRequestIdByStatusError>({
    ...options,
    url: '/request/{requestId}/{status}'
}); };

/**
 * Get movie details
 * Returns full movie details in a JSON object.
 */
export const getMovieByMovieId = (options: Options<GetMovieByMovieIdData>) => { return (options?.client ?? client).get<GetMovieByMovieIdResponse, GetMovieByMovieIdError>({
    ...options,
    url: '/movie/{movieId}'
}); };

/**
 * Get recommended movies
 * Returns list of recommended movies based on provided movie ID in a JSON object.
 */
export const getMovieByMovieIdRecommendations = (options: Options<GetMovieByMovieIdRecommendationsData>) => { return (options?.client ?? client).get<GetMovieByMovieIdRecommendationsResponse, GetMovieByMovieIdRecommendationsError>({
    ...options,
    url: '/movie/{movieId}/recommendations'
}); };

/**
 * Get similar movies
 * Returns list of similar movies based on the provided movieId in a JSON object.
 */
export const getMovieByMovieIdSimilar = (options: Options<GetMovieByMovieIdSimilarData>) => { return (options?.client ?? client).get<GetMovieByMovieIdSimilarResponse, GetMovieByMovieIdSimilarError>({
    ...options,
    url: '/movie/{movieId}/similar'
}); };

/**
 * Get movie ratings
 * Returns ratings based on the provided movieId in a JSON object.
 */
export const getMovieByMovieIdRatings = (options: Options<GetMovieByMovieIdRatingsData>) => { return (options?.client ?? client).get<GetMovieByMovieIdRatingsResponse, GetMovieByMovieIdRatingsError>({
    ...options,
    url: '/movie/{movieId}/ratings'
}); };

/**
 * Get RT and IMDB movie ratings combined
 * Returns ratings from RottenTomatoes and IMDB based on the provided movieId in a JSON object.
 */
export const getMovieByMovieIdRatingscombined = (options: Options<GetMovieByMovieIdRatingscombinedData>) => { return (options?.client ?? client).get<GetMovieByMovieIdRatingscombinedResponse, GetMovieByMovieIdRatingscombinedError>({
    ...options,
    url: '/movie/{movieId}/ratingscombined'
}); };

/**
 * Get TV details
 * Returns full TV details in a JSON object.
 */
export const getTvByTvId = (options: Options<GetTvByTvIdData>) => { return (options?.client ?? client).get<GetTvByTvIdResponse, GetTvByTvIdError>({
    ...options,
    url: '/tv/{tvId}'
}); };

/**
 * Get season details and episode list
 * Returns season details with a list of episodes in a JSON object.
 */
export const getTvByTvIdSeasonBySeasonId = (options: Options<GetTvByTvIdSeasonBySeasonIdData>) => { return (options?.client ?? client).get<GetTvByTvIdSeasonBySeasonIdResponse, GetTvByTvIdSeasonBySeasonIdError>({
    ...options,
    url: '/tv/{tvId}/season/{seasonId}'
}); };

/**
 * Get recommended TV series
 * Returns list of recommended TV series based on the provided tvId in a JSON object.
 */
export const getTvByTvIdRecommendations = (options: Options<GetTvByTvIdRecommendationsData>) => { return (options?.client ?? client).get<GetTvByTvIdRecommendationsResponse, GetTvByTvIdRecommendationsError>({
    ...options,
    url: '/tv/{tvId}/recommendations'
}); };

/**
 * Get similar TV series
 * Returns list of similar TV series based on the provided tvId in a JSON object.
 */
export const getTvByTvIdSimilar = (options: Options<GetTvByTvIdSimilarData>) => { return (options?.client ?? client).get<GetTvByTvIdSimilarResponse, GetTvByTvIdSimilarError>({
    ...options,
    url: '/tv/{tvId}/similar'
}); };

/**
 * Get TV ratings
 * Returns ratings based on provided tvId in a JSON object.
 */
export const getTvByTvIdRatings = (options: Options<GetTvByTvIdRatingsData>) => { return (options?.client ?? client).get<GetTvByTvIdRatingsResponse, GetTvByTvIdRatingsError>({
    ...options,
    url: '/tv/{tvId}/ratings'
}); };

/**
 * Get person details
 * Returns person details based on provided personId in a JSON object.
 */
export const getPersonByPersonId = (options: Options<GetPersonByPersonIdData>) => { return (options?.client ?? client).get<GetPersonByPersonIdResponse, GetPersonByPersonIdError>({
    ...options,
    url: '/person/{personId}'
}); };

/**
 * Get combined credits
 * Returns the person's combined credits based on the provided personId in a JSON object.
 */
export const getPersonByPersonIdCombinedCredits = (options: Options<GetPersonByPersonIdCombinedCreditsData>) => { return (options?.client ?? client).get<GetPersonByPersonIdCombinedCreditsResponse, GetPersonByPersonIdCombinedCreditsError>({
    ...options,
    url: '/person/{personId}/combined_credits'
}); };

/**
 * Get media
 * Returns all media (can be filtered and limited) in a JSON object.
 */
export const getMedia = (options?: Options<GetMediaData>) => { return (options?.client ?? client).get<GetMediaResponse, GetMediaError>({
    ...options,
    url: '/media'
}); };

/**
 * Delete media item
 * Removes a media item. The `MANAGE_REQUESTS` permission is required to perform this action.
 */
export const deleteMediaByMediaId = (options: Options<DeleteMediaByMediaIdData>) => { return (options?.client ?? client).delete<DeleteMediaByMediaIdResponse, DeleteMediaByMediaIdError>({
    ...options,
    url: '/media/{mediaId}'
}); };

/**
 * Update media status
 * Updates a media item's status and returns the media in JSON format
 */
export const postMediaByMediaIdByStatus = (options: Options<PostMediaByMediaIdByStatusData>) => { return (options?.client ?? client).post<PostMediaByMediaIdByStatusResponse, PostMediaByMediaIdByStatusError>({
    ...options,
    url: '/media/{mediaId}/{status}'
}); };

/**
 * Get watch data
 * Returns play count, play duration, and users who have watched the media.
 *
 * Requires the `ADMIN` permission.
 *
 */
export const getMediaByMediaIdWatchData = (options: Options<GetMediaByMediaIdWatchDataData>) => { return (options?.client ?? client).get<GetMediaByMediaIdWatchDataResponse, GetMediaByMediaIdWatchDataError>({
    ...options,
    url: '/media/{mediaId}/watch_data'
}); };

/**
 * Get collection details
 * Returns full collection details in a JSON object.
 */
export const getCollectionByCollectionId = (options: Options<GetCollectionByCollectionIdData>) => { return (options?.client ?? client).get<GetCollectionByCollectionIdResponse, GetCollectionByCollectionIdError>({
    ...options,
    url: '/collection/{collectionId}'
}); };

/**
 * Get non-sensitive Radarr server list
 * Returns a list of Radarr server IDs and names in a JSON object.
 */
export const getServiceRadarr = (options?: Options) => { return (options?.client ?? client).get<GetServiceRadarrResponse, GetServiceRadarrError>({
    ...options,
    url: '/service/radarr'
}); };

/**
 * Get Radarr server quality profiles and root folders
 * Returns a Radarr server's quality profile and root folder details in a JSON object.
 */
export const getServiceRadarrByRadarrId = (options: Options<GetServiceRadarrByRadarrIdData>) => { return (options?.client ?? client).get<GetServiceRadarrByRadarrIdResponse, GetServiceRadarrByRadarrIdError>({
    ...options,
    url: '/service/radarr/{radarrId}'
}); };

/**
 * Get non-sensitive Sonarr server list
 * Returns a list of Sonarr server IDs and names in a JSON object.
 */
export const getServiceSonarr = (options?: Options) => { return (options?.client ?? client).get<GetServiceSonarrResponse, GetServiceSonarrError>({
    ...options,
    url: '/service/sonarr'
}); };

/**
 * Get Sonarr server quality profiles and root folders
 * Returns a Sonarr server's quality profile and root folder details in a JSON object.
 */
export const getServiceSonarrBySonarrId = (options: Options<GetServiceSonarrBySonarrIdData>) => { return (options?.client ?? client).get<GetServiceSonarrBySonarrIdResponse, GetServiceSonarrBySonarrIdError>({
    ...options,
    url: '/service/sonarr/{sonarrId}'
}); };

/**
 * Get series from Sonarr
 * Returns a list of series returned by searching for the name in Sonarr.
 */
export const getServiceSonarrLookupByTmdbId = (options: Options<GetServiceSonarrLookupByTmdbIdData>) => { return (options?.client ?? client).get<GetServiceSonarrLookupByTmdbIdResponse, GetServiceSonarrLookupByTmdbIdError>({
    ...options,
    url: '/service/sonarr/lookup/{tmdbId}'
}); };

/**
 * Regions supported by TMDB
 * Returns a list of regions in a JSON object.
 */
export const getRegions = (options?: Options) => { return (options?.client ?? client).get<GetRegionsResponse, GetRegionsError>({
    ...options,
    url: '/regions'
}); };

/**
 * Languages supported by TMDB
 * Returns a list of languages in a JSON object.
 */
export const getLanguages = (options?: Options) => { return (options?.client ?? client).get<GetLanguagesResponse, GetLanguagesError>({
    ...options,
    url: '/languages'
}); };

/**
 * Get movie studio details
 * Returns movie studio details in a JSON object.
 */
export const getStudioByStudioId = (options: Options<GetStudioByStudioIdData>) => { return (options?.client ?? client).get<GetStudioByStudioIdResponse, GetStudioByStudioIdError>({
    ...options,
    url: '/studio/{studioId}'
}); };

/**
 * Get TV network details
 * Returns TV network details in a JSON object.
 */
export const getNetworkByNetworkId = (options: Options<GetNetworkByNetworkIdData>) => { return (options?.client ?? client).get<GetNetworkByNetworkIdResponse, GetNetworkByNetworkIdError>({
    ...options,
    url: '/network/{networkId}'
}); };

/**
 * Get list of official TMDB movie genres
 * Returns a list of genres in a JSON array.
 */
export const getGenresMovie = (options?: Options<GetGenresMovieData>) => { return (options?.client ?? client).get<GetGenresMovieResponse, GetGenresMovieError>({
    ...options,
    url: '/genres/movie'
}); };

/**
 * Get list of official TMDB movie genres
 * Returns a list of genres in a JSON array.
 */
export const getGenresTv = (options?: Options<GetGenresTvData>) => { return (options?.client ?? client).get<GetGenresTvResponse, GetGenresTvError>({
    ...options,
    url: '/genres/tv'
}); };

/**
 * Get backdrops of trending items
 * Returns a list of backdrop image paths in a JSON array.
 */
export const getBackdrops = (options?: Options) => { return (options?.client ?? client).get<GetBackdropsResponse, GetBackdropsError>({
    ...options,
    url: '/backdrops'
}); };

/**
 * Get all issues
 * Returns a list of issues in JSON format.
 *
 */
export const getIssue = (options?: Options<GetIssueData>) => { return (options?.client ?? client).get<GetIssueResponse, GetIssueError>({
    ...options,
    url: '/issue'
}); };

/**
 * Create new issue
 * Creates a new issue
 *
 */
export const postIssue = (options: Options<PostIssueData>) => { return (options?.client ?? client).post<PostIssueResponse, PostIssueError>({
    ...options,
    url: '/issue'
}); };

/**
 * Gets issue counts
 * Returns the number of open and closed issues, as well as the number of issues of each type.
 *
 */
export const getIssueCount = (options?: Options) => { return (options?.client ?? client).get<GetIssueCountResponse, GetIssueCountError>({
    ...options,
    url: '/issue/count'
}); };

/**
 * Get issue
 * Returns a single issue in JSON format.
 *
 */
export const getIssueByIssueId = (options: Options<GetIssueByIssueIdData>) => { return (options?.client ?? client).get<GetIssueByIssueIdResponse, GetIssueByIssueIdError>({
    ...options,
    url: '/issue/{issueId}'
}); };

/**
 * Delete issue
 * Removes an issue. If the user has the `MANAGE_ISSUES` permission, any issue can be removed. Otherwise, only a users own issues can be removed.
 */
export const deleteIssueByIssueId = (options: Options<DeleteIssueByIssueIdData>) => { return (options?.client ?? client).delete<DeleteIssueByIssueIdResponse, DeleteIssueByIssueIdError>({
    ...options,
    url: '/issue/{issueId}'
}); };

/**
 * Create a comment
 * Creates a comment and returns associated issue in JSON format.
 *
 */
export const postIssueByIssueIdComment = (options: Options<PostIssueByIssueIdCommentData>) => { return (options?.client ?? client).post<PostIssueByIssueIdCommentResponse, PostIssueByIssueIdCommentError>({
    ...options,
    url: '/issue/{issueId}/comment'
}); };

/**
 * Get issue comment
 * Returns a single issue comment in JSON format.
 *
 */
export const getIssueCommentByCommentId = (options: Options<GetIssueCommentByCommentIdData>) => { return (options?.client ?? client).get<GetIssueCommentByCommentIdResponse, GetIssueCommentByCommentIdError>({
    ...options,
    url: '/issueComment/{commentId}'
}); };

/**
 * Update issue comment
 * Updates and returns a single issue comment in JSON format.
 *
 */
export const putIssueCommentByCommentId = (options: Options<PutIssueCommentByCommentIdData>) => { return (options?.client ?? client).put<PutIssueCommentByCommentIdResponse, PutIssueCommentByCommentIdError>({
    ...options,
    url: '/issueComment/{commentId}'
}); };

/**
 * Delete issue comment
 * Deletes an issue comment. Only users with `MANAGE_ISSUES` or the user who created the comment can perform this action.
 *
 */
export const deleteIssueCommentByCommentId = (options: Options<DeleteIssueCommentByCommentIdData>) => { return (options?.client ?? client).delete<DeleteIssueCommentByCommentIdResponse, DeleteIssueCommentByCommentIdError>({
    ...options,
    url: '/issueComment/{commentId}'
}); };

/**
 * Update an issue's status
 * Updates an issue's status to approved or declined. Also returns the issue in a JSON object.
 *
 * Requires the `MANAGE_ISSUES` permission or `ADMIN`.
 *
 */
export const postIssueByIssueIdByStatus = (options: Options<PostIssueByIssueIdByStatusData>) => { return (options?.client ?? client).post<PostIssueByIssueIdByStatusResponse, PostIssueByIssueIdByStatusError>({
    ...options,
    url: '/issue/{issueId}/{status}'
}); };

/**
 * Get keyword
 * Returns a single keyword in JSON format.
 *
 */
export const getKeywordByKeywordId = (options: Options<GetKeywordByKeywordIdData>) => { return (options?.client ?? client).get<GetKeywordByKeywordIdResponse, GetKeywordByKeywordIdError>({
    ...options,
    url: '/keyword/{keywordId}'
}); };

/**
 * Get watch provider regions
 * Returns a list of all available watch provider regions.
 *
 */
export const getWatchprovidersRegions = (options?: Options) => { return (options?.client ?? client).get<GetWatchprovidersRegionsResponse, GetWatchprovidersRegionsError>({
    ...options,
    url: '/watchproviders/regions'
}); };

/**
 * Get watch provider movies
 * Returns a list of all available watch providers for movies.
 *
 */
export const getWatchprovidersMovies = (options: Options<GetWatchprovidersMoviesData>) => { return (options?.client ?? client).get<GetWatchprovidersMoviesResponse, GetWatchprovidersMoviesError>({
    ...options,
    url: '/watchproviders/movies'
}); };

/**
 * Get watch provider series
 * Returns a list of all available watch providers for series.
 *
 */
export const getWatchprovidersTv = (options: Options<GetWatchprovidersTvData>) => { return (options?.client ?? client).get<GetWatchprovidersTvResponse, GetWatchprovidersTvError>({
    ...options,
    url: '/watchproviders/tv'
}); };

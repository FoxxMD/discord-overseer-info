// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    readonly id: number;
    readonly email: string;
    username?: string;
    readonly plexToken?: string;
    readonly plexUsername?: string;
    readonly userType?: number;
    permissions?: number;
    readonly avatar?: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly requestCount?: number;
};

export type UserSettings = {
    locale?: string;
    region?: string;
    originalLanguage?: string;
};

export type MainSettings = {
    readonly apiKey?: string;
    appLanguage?: string;
    applicationTitle?: string;
    applicationUrl?: string;
    trustProxy?: boolean;
    csrfProtection?: boolean;
    hideAvailable?: boolean;
    partialRequestsEnabled?: boolean;
    localLogin?: boolean;
    newPlexLogin?: boolean;
    defaultPermissions?: number;
};

export type PlexLibrary = {
    id: string;
    name: string;
    enabled: boolean;
};

export type PlexSettings = {
    readonly name: string;
    readonly machineId: string;
    ip: string;
    port: number;
    useSsl?: boolean | null;
    readonly libraries?: Array<PlexLibrary>;
    webAppUrl?: string | null;
};

export type PlexConnection = {
    protocol: string;
    address: string;
    port: number;
    uri: string;
    local: boolean;
    status?: number;
    message?: string;
};

export type PlexDevice = {
    name: string;
    product: string;
    productVersion: string;
    platform: string;
    platformVersion?: string;
    device: string;
    clientIdentifier: string;
    createdAt: string;
    lastSeenAt: string;
    provides: Array<(string)>;
    owned: boolean;
    ownerID?: string;
    home?: boolean;
    sourceTitle?: string;
    accessToken?: string;
    publicAddress?: string;
    httpsRequired?: boolean;
    synced?: boolean;
    relay?: boolean;
    dnsRebindingProtection?: boolean;
    natLoopbackSupported?: boolean;
    publicAddressMatches?: boolean;
    presence?: boolean;
    connection: Array<PlexConnection>;
};

export type TautulliSettings = {
    hostname?: string | null;
    port?: number | null;
    useSsl?: boolean | null;
    apiKey?: string | null;
    externalUrl?: string | null;
};

export type RadarrSettings = {
    readonly id?: number;
    name: string;
    hostname: string;
    port: number;
    apiKey: string;
    useSsl: boolean;
    baseUrl?: string;
    activeProfileId: number;
    activeProfileName: string;
    activeDirectory: string;
    is4k: boolean;
    minimumAvailability: string;
    isDefault: boolean;
    externalUrl?: string;
    syncEnabled?: boolean;
    preventSearch?: boolean;
};

export type SonarrSettings = {
    readonly id?: number;
    name: string;
    hostname: string;
    port: number;
    apiKey: string;
    useSsl: boolean;
    baseUrl?: string;
    activeProfileId: number;
    activeProfileName: string;
    activeDirectory: string;
    activeLanguageProfileId?: number;
    activeAnimeProfileId?: number | null;
    activeAnimeLanguageProfileId?: number | null;
    activeAnimeProfileName?: string | null;
    activeAnimeDirectory?: string | null;
    is4k: boolean;
    enableSeasonFolders: boolean;
    isDefault: boolean;
    externalUrl?: string;
    syncEnabled?: boolean;
    preventSearch?: boolean;
};

export type ServarrTag = {
    id?: number;
    label?: string;
};

export type PublicSettings = {
    initialized?: boolean;
};

export type MovieResult = {
    id: number;
    mediaType: string;
    popularity?: number;
    posterPath?: string;
    backdropPath?: string;
    voteCount?: number;
    voteAverage?: number;
    genreIds?: Array<(number)>;
    overview?: string;
    originalLanguage?: string;
    title: string;
    originalTitle?: string;
    releaseDate?: string;
    adult?: boolean;
    video?: boolean;
    mediaInfo?: MediaInfo;
};

export type TvResult = {
    id?: number;
    mediaType?: string;
    popularity?: number;
    posterPath?: string;
    backdropPath?: string;
    voteCount?: number;
    voteAverage?: number;
    genreIds?: Array<(number)>;
    overview?: string;
    originalLanguage?: string;
    name?: string;
    originalName?: string;
    originCountry?: Array<(string)>;
    firstAirDate?: string;
    mediaInfo?: MediaInfo;
};

export type PersonResult = {
    id?: number;
    profilePath?: string;
    adult?: boolean;
    mediaType?: string;
    knownFor?: Array<(MovieResult | TvResult)>;
};

export type Genre = {
    id?: number;
    name?: string;
};

export type Company = {
    id?: number;
    logo_path?: string | null;
    name?: string;
};

export type ProductionCompany = {
    id?: number;
    logoPath?: string | null;
    originCountry?: string;
    name?: string;
};

export type Network = {
    id?: number;
    logoPath?: string | null;
    originCountry?: string;
    name?: string;
};

export type RelatedVideo = {
    url?: string;
    key?: string;
    name?: string;
    size?: number;
    type?: 'Clip' | 'Teaser' | 'Trailer' | 'Featurette' | 'Opening Credits' | 'Behind the Scenes' | 'Bloopers';
    site?: 'YouTube';
};

export type type = 'Clip' | 'Teaser' | 'Trailer' | 'Featurette' | 'Opening Credits' | 'Behind the Scenes' | 'Bloopers';

export type site = 'YouTube';

export type MovieDetails = {
    readonly id?: number;
    imdbId?: string;
    adult?: boolean;
    backdropPath?: string;
    posterPath?: string;
    budget?: number;
    genres?: Array<Genre>;
    homepage?: string;
    relatedVideos?: Array<RelatedVideo>;
    originalLanguage?: string;
    originalTitle?: string;
    overview?: string;
    popularity?: number;
    productionCompanies?: Array<ProductionCompany>;
    productionCountries?: Array<{
        iso_3166_1?: string;
        name?: string;
    }>;
    releaseDate?: string;
    releases?: {
        results?: Array<{
            iso_3166_1?: string;
            rating?: string | null;
            release_dates?: Array<{
                certification?: string;
                iso_639_1?: string | null;
                note?: string | null;
                release_date?: string;
                type?: number;
            }>;
        }>;
    };
    revenue?: number | null;
    runtime?: number;
    spokenLanguages?: Array<SpokenLanguage>;
    status?: string;
    tagline?: string;
    title?: string;
    video?: boolean;
    voteAverage?: number;
    voteCount?: number;
    credits?: {
        cast?: Array<Cast>;
        crew?: Array<Crew>;
    };
    collection?: {
        id?: number;
        name?: string;
        posterPath?: string;
        backdropPath?: string;
    };
    externalIds?: ExternalIds;
    mediaInfo?: MediaInfo;
    watchProviders?: Array<WatchProviders>;
};

export type Episode = {
    id?: number;
    name?: string;
    airDate?: string | null;
    episodeNumber?: number;
    overview?: string;
    productionCode?: string;
    seasonNumber?: number;
    showId?: number;
    stillPath?: string | null;
    voteAverage?: number;
    voteCount?: number;
};

export type Season = {
    id?: number;
    airDate?: string | null;
    episodeCount?: number;
    name?: string;
    overview?: string;
    posterPath?: string;
    seasonNumber?: number;
    episodes?: Array<Episode>;
};

export type TvDetails = {
    id?: number;
    backdropPath?: string;
    posterPath?: string;
    contentRatings?: {
        results?: Array<{
            iso_3166_1?: string;
            rating?: string;
        }>;
    };
    createdBy?: Array<{
        id?: number;
        name?: string;
        gender?: number;
        profilePath?: string | null;
    }>;
    episodeRunTime?: Array<(number)>;
    firstAirDate?: string;
    genres?: Array<Genre>;
    homepage?: string;
    inProduction?: boolean;
    languages?: Array<(string)>;
    lastAirDate?: string;
    lastEpisodeToAir?: Episode;
    name?: string;
    nextEpisodeToAir?: Episode;
    networks?: Array<ProductionCompany>;
    numberOfEpisodes?: number;
    numberOfSeason?: number;
    originCountry?: Array<(string)>;
    originalLanguage?: string;
    originalName?: string;
    overview?: string;
    popularity?: number;
    productionCompanies?: Array<ProductionCompany>;
    productionCountries?: Array<{
        iso_3166_1?: string;
        name?: string;
    }>;
    spokenLanguages?: Array<SpokenLanguage>;
    seasons?: Array<Season>;
    status?: string;
    tagline?: string;
    type?: string;
    voteAverage?: number;
    voteCount?: number;
    credits?: {
        cast?: Array<Cast>;
        crew?: Array<Crew>;
    };
    externalIds?: ExternalIds;
    keywords?: Array<Keyword>;
    mediaInfo?: MediaInfo;
    watchProviders?: Array<WatchProviders>;
};

export type MediaRequest = {
    readonly id: number;
    /**
     * Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED
     */
    readonly status: number;
    media?: MediaInfo;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    requestedBy?: User;
    modifiedBy?: User | string | null;
    is4k?: boolean;
    serverId?: number;
    profileId?: number;
    rootFolder?: string;
};

export type MediaInfo = {
    readonly id?: number;
    readonly tmdbId?: number;
    readonly tvdbId?: number | null;
    /**
     * Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
     */
    status?: number;
    readonly requests?: Array<MediaRequest>;
    readonly createdAt?: string;
    readonly updatedAt?: string;
};

export type Cast = {
    id?: number;
    castId?: number;
    character?: string;
    creditId?: string;
    gender?: number;
    name?: string;
    order?: number;
    profilePath?: string | null;
};

export type Crew = {
    id?: number;
    creditId?: string;
    gender?: number;
    name?: string;
    job?: string;
    department?: string;
    profilePath?: string | null;
};

export type ExternalIds = {
    facebookId?: string | null;
    freebaseId?: string | null;
    freebaseMid?: string | null;
    imdbId?: string | null;
    instagramId?: string | null;
    tvdbId?: number | null;
    tvrageId?: number | null;
    twitterId?: string | null;
};

export type ServiceProfile = {
    id?: number;
    name?: string;
};

export type PageInfo = {
    page?: number;
    pages?: number;
    results?: number;
};

export type DiscordSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        botUsername?: string;
        botAvatarUrl?: string;
        webhookUrl?: string;
        enableMentions?: boolean;
    };
};

export type SlackSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        webhookUrl?: string;
    };
};

export type WebPushSettings = {
    enabled?: boolean;
    types?: number;
};

export type WebhookSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        webhookUrl?: string;
        authHeader?: string;
        jsonPayload?: string;
    };
};

export type TelegramSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        botUsername?: string;
        botAPI?: string;
        chatId?: string;
        sendSilently?: boolean;
    };
};

export type PushbulletSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        accessToken?: string;
        channelTag?: string | null;
    };
};

export type PushoverSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        accessToken?: string;
        userToken?: string;
        sound?: string;
    };
};

export type GotifySettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        url?: string;
        token?: string;
    };
};

export type LunaSeaSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        webhookUrl?: string;
        profileName?: string;
    };
};

export type NotificationEmailSettings = {
    enabled?: boolean;
    types?: number;
    options?: {
        emailFrom?: string;
        senderName?: string;
        smtpHost?: string;
        smtpPort?: number;
        secure?: boolean;
        ignoreTls?: boolean;
        requireTls?: boolean;
        authUser?: string | null;
        authPass?: string | null;
        allowSelfSigned?: boolean;
    };
};

export type Job = {
    id?: string;
    type?: 'process' | 'command';
    interval?: 'short' | 'long' | 'fixed';
    name?: string;
    nextExecutionTime?: string;
    running?: boolean;
};

export type type2 = 'process' | 'command';

export type interval = 'short' | 'long' | 'fixed';

export type PersonDetails = {
    id?: number;
    name?: string;
    deathday?: string;
    knownForDepartment?: string;
    alsoKnownAs?: Array<(string)>;
    gender?: string;
    biography?: string;
    popularity?: string;
    placeOfBirth?: string;
    profilePath?: string;
    adult?: boolean;
    imdbId?: string;
    homepage?: string;
};

export type CreditCast = {
    id?: number;
    originalLanguage?: string;
    episodeCount?: number;
    overview?: string;
    originCountry?: Array<(string)>;
    originalName?: string;
    voteCount?: number;
    name?: string;
    mediaType?: string;
    popularity?: number;
    creditId?: string;
    backdropPath?: string;
    firstAirDate?: string;
    voteAverage?: number;
    genreIds?: Array<(number)>;
    posterPath?: string;
    originalTitle?: string;
    video?: boolean;
    title?: string;
    adult?: boolean;
    releaseDate?: string;
    character?: string;
    mediaInfo?: MediaInfo;
};

export type CreditCrew = {
    id?: number;
    originalLanguage?: string;
    episodeCount?: number;
    overview?: string;
    originCountry?: Array<(string)>;
    originalName?: string;
    voteCount?: number;
    name?: string;
    mediaType?: string;
    popularity?: number;
    creditId?: string;
    backdropPath?: string;
    firstAirDate?: string;
    voteAverage?: number;
    genreIds?: Array<(number)>;
    posterPath?: string;
    originalTitle?: string;
    video?: boolean;
    title?: string;
    adult?: boolean;
    releaseDate?: string;
    department?: string;
    job?: string;
    mediaInfo?: MediaInfo;
};

export type Keyword = {
    id?: number;
    name?: string;
};

export type SpokenLanguage = {
    englishName?: string | null;
    iso_639_1?: string;
    name?: string;
};

export type Collection = {
    id?: number;
    name?: string;
    overview?: string;
    posterPath?: string;
    backdropPath?: string;
    parts?: Array<MovieResult>;
};

export type SonarrSeries = {
    title?: string;
    sortTitle?: string;
    seasonCount?: number;
    status?: string;
    overview?: string;
    network?: string;
    airTime?: string;
    images?: Array<{
        coverType?: string;
        url?: string;
    }>;
    remotePoster?: string;
    seasons?: Array<{
        seasonNumber?: number;
        monitored?: boolean;
    }>;
    year?: number;
    path?: string;
    profileId?: number;
    languageProfileId?: number;
    seasonFolder?: boolean;
    monitored?: boolean;
    useSceneNumbering?: boolean;
    runtime?: number;
    tvdbId?: number;
    tvRageId?: number;
    tvMazeId?: number;
    firstAired?: string;
    lastInfoSync?: string | null;
    seriesType?: string;
    cleanTitle?: string;
    imdbId?: string;
    titleSlug?: string;
    certification?: string;
    genres?: Array<(string)>;
    tags?: Array<(string)>;
    added?: string;
    ratings?: Array<{
        votes?: number;
        value?: number;
    }>;
    qualityProfileId?: number;
    id?: number | null;
    rootFolderPath?: string | null;
    addOptions?: Array<{
        ignoreEpisodesWithFiles?: boolean | null;
        ignoreEpisodesWithoutFiles?: boolean | null;
        searchForMissingEpisodes?: boolean | null;
    }>;
};

export type UserSettingsNotifications = {
    notificationTypes?: NotificationAgentTypes;
    emailEnabled?: boolean;
    pgpKey?: string | null;
    discordEnabled?: boolean;
    discordEnabledTypes?: number | null;
    discordId?: string | null;
    pushbulletAccessToken?: string | null;
    pushoverApplicationToken?: string | null;
    pushoverUserKey?: string | null;
    pushoverSound?: string | null;
    telegramEnabled?: boolean;
    telegramBotUsername?: string | null;
    telegramChatId?: string | null;
    telegramSendSilently?: boolean | null;
};

export type NotificationAgentTypes = {
    discord?: number;
    email?: number;
    pushbullet?: number;
    pushover?: number;
    slack?: number;
    telegram?: number;
    webhook?: number;
    webpush?: number;
};

export type WatchProviders = Array<{
    iso_3166_1?: string;
    link?: string;
    buy?: Array<WatchProviderDetails>;
    flatrate?: unknown;
}>;

export type WatchProviderDetails = {
    displayPriority?: number;
    logoPath?: string;
    id?: number;
    name?: string;
};

export type Issue = {
    id?: number;
    issueType?: number;
    media?: MediaInfo;
    createdBy?: User;
    modifiedBy?: User;
    comments?: Array<IssueComment>;
};

export type IssueComment = {
    id?: number;
    user?: User;
    message?: string;
};

export type DiscoverSlider = {
    id?: number;
    type: number;
    title: string | null;
    isBuiltIn?: boolean;
    enabled: boolean;
    data: string | null;
};

export type WatchProviderRegion = {
    iso_3166_1?: string;
    english_name?: string;
    native_name?: string;
};

export type GetStatusResponse = {
    version?: string;
    commitTag?: string;
    updateAvailable?: boolean;
    commitsBehind?: number;
    restartRequired?: boolean;
};

export type GetStatusError = unknown;

export type GetStatusAppdataResponse = {
    appData?: boolean;
    appDataPath?: string;
};

export type GetStatusAppdataError = unknown;

export type GetSettingsMainResponse = MainSettings;

export type GetSettingsMainError = unknown;

export type PostSettingsMainData = {
    body: MainSettings;
};

export type PostSettingsMainResponse = MainSettings;

export type PostSettingsMainError = unknown;

export type PostSettingsMainRegenerateResponse = MainSettings;

export type PostSettingsMainRegenerateError = unknown;

export type GetSettingsPlexResponse = PlexSettings;

export type GetSettingsPlexError = unknown;

export type PostSettingsPlexData = {
    body: PlexSettings;
};

export type PostSettingsPlexResponse = PlexSettings;

export type PostSettingsPlexError = unknown;

export type GetSettingsPlexLibraryData = {
    query?: {
        /**
         * Comma separated list of libraries to enable. Any libraries not passed will be disabled!
         */
        enable?: string | null;
        /**
         * Syncs the current libraries with the current Plex server
         */
        sync?: string | null;
    };
};

export type GetSettingsPlexLibraryResponse = Array<PlexLibrary>;

export type GetSettingsPlexLibraryError = unknown;

export type GetSettingsPlexSyncResponse = {
    running?: boolean;
    progress?: number;
    total?: number;
    currentLibrary?: PlexLibrary;
    libraries?: Array<PlexLibrary>;
};

export type GetSettingsPlexSyncError = unknown;

export type PostSettingsPlexSyncData = {
    body?: {
        cancel?: boolean;
        start?: boolean;
    };
};

export type PostSettingsPlexSyncResponse = {
    running?: boolean;
    progress?: number;
    total?: number;
    currentLibrary?: PlexLibrary;
    libraries?: Array<PlexLibrary>;
};

export type PostSettingsPlexSyncError = unknown;

export type GetSettingsPlexDevicesServersResponse = Array<PlexDevice>;

export type GetSettingsPlexDevicesServersError = unknown;

export type GetSettingsPlexUsersResponse = Array<{
    id?: string;
    title?: string;
    username?: string;
    email?: string;
    thumb?: string;
}>;

export type GetSettingsPlexUsersError = unknown;

export type GetSettingsTautulliResponse = TautulliSettings;

export type GetSettingsTautulliError = unknown;

export type PostSettingsTautulliData = {
    body: TautulliSettings;
};

export type PostSettingsTautulliResponse = TautulliSettings;

export type PostSettingsTautulliError = unknown;

export type GetSettingsRadarrResponse = Array<RadarrSettings>;

export type GetSettingsRadarrError = unknown;

export type PostSettingsRadarrData = {
    body: RadarrSettings;
};

export type PostSettingsRadarrResponse = RadarrSettings;

export type PostSettingsRadarrError = unknown;

export type PostSettingsRadarrTestData = {
    body: {
        hostname: string;
        port: number;
        apiKey: string;
        useSsl: boolean;
        baseUrl?: string;
    };
};

export type PostSettingsRadarrTestResponse = {
    profiles?: Array<ServiceProfile>;
};

export type PostSettingsRadarrTestError = unknown;

export type PutSettingsRadarrByRadarrIdData = {
    body: RadarrSettings;
    path: {
        /**
         * Radarr instance ID
         */
        radarrId: number;
    };
};

export type PutSettingsRadarrByRadarrIdResponse = RadarrSettings;

export type PutSettingsRadarrByRadarrIdError = unknown;

export type DeleteSettingsRadarrByRadarrIdData = {
    path: {
        /**
         * Radarr instance ID
         */
        radarrId: number;
    };
};

export type DeleteSettingsRadarrByRadarrIdResponse = RadarrSettings;

export type DeleteSettingsRadarrByRadarrIdError = unknown;

export type GetSettingsRadarrByRadarrIdProfilesData = {
    path: {
        /**
         * Radarr instance ID
         */
        radarrId: number;
    };
};

export type GetSettingsRadarrByRadarrIdProfilesResponse = Array<ServiceProfile>;

export type GetSettingsRadarrByRadarrIdProfilesError = unknown;

export type GetSettingsSonarrResponse = Array<SonarrSettings>;

export type GetSettingsSonarrError = unknown;

export type PostSettingsSonarrData = {
    body: SonarrSettings;
};

export type PostSettingsSonarrResponse = SonarrSettings;

export type PostSettingsSonarrError = unknown;

export type PostSettingsSonarrTestData = {
    body: {
        hostname: string;
        port: number;
        apiKey: string;
        useSsl: boolean;
        baseUrl?: string;
    };
};

export type PostSettingsSonarrTestResponse = {
    profiles?: Array<ServiceProfile>;
};

export type PostSettingsSonarrTestError = unknown;

export type PutSettingsSonarrBySonarrIdData = {
    body: SonarrSettings;
    path: {
        /**
         * Sonarr instance ID
         */
        sonarrId: number;
    };
};

export type PutSettingsSonarrBySonarrIdResponse = SonarrSettings;

export type PutSettingsSonarrBySonarrIdError = unknown;

export type DeleteSettingsSonarrBySonarrIdData = {
    path: {
        /**
         * Sonarr instance ID
         */
        sonarrId: number;
    };
};

export type DeleteSettingsSonarrBySonarrIdResponse = SonarrSettings;

export type DeleteSettingsSonarrBySonarrIdError = unknown;

export type GetSettingsPublicResponse = PublicSettings;

export type GetSettingsPublicError = unknown;

export type PostSettingsInitializeResponse = PublicSettings;

export type PostSettingsInitializeError = unknown;

export type GetSettingsJobsResponse = Array<Job>;

export type GetSettingsJobsError = unknown;

export type PostSettingsJobsByJobIdRunData = {
    path: {
        jobId: string;
    };
};

export type PostSettingsJobsByJobIdRunResponse = Job;

export type PostSettingsJobsByJobIdRunError = unknown;

export type PostSettingsJobsByJobIdCancelData = {
    path: {
        jobId: string;
    };
};

export type PostSettingsJobsByJobIdCancelResponse = Job;

export type PostSettingsJobsByJobIdCancelError = unknown;

export type PostSettingsJobsByJobIdScheduleData = {
    body: {
        schedule?: string;
    };
    path: {
        jobId: string;
    };
};

export type PostSettingsJobsByJobIdScheduleResponse = Job;

export type PostSettingsJobsByJobIdScheduleError = unknown;

export type GetSettingsCacheResponse = {
    imageCache?: {
        tmdb?: {
            size?: number;
            imageCount?: number;
        };
    };
    apiCaches?: Array<{
        id?: string;
        name?: string;
        stats?: {
            hits?: number;
            misses?: number;
            keys?: number;
            ksize?: number;
            vsize?: number;
        };
    }>;
};

export type GetSettingsCacheError = unknown;

export type PostSettingsCacheByCacheIdFlushData = {
    path: {
        cacheId: string;
    };
};

export type PostSettingsCacheByCacheIdFlushResponse = void;

export type PostSettingsCacheByCacheIdFlushError = unknown;

export type GetSettingsLogsData = {
    query?: {
        filter?: 'debug' | 'info' | 'warn' | 'error' | null;
        search?: string | null;
        skip?: number | null;
        take?: number | null;
    };
};

export type GetSettingsLogsResponse = Array<{
    label?: string;
    level?: string;
    message?: string;
    timestamp?: string;
}>;

export type GetSettingsLogsError = unknown;

export type GetSettingsNotificationsEmailResponse = NotificationEmailSettings;

export type GetSettingsNotificationsEmailError = unknown;

export type PostSettingsNotificationsEmailData = {
    body: NotificationEmailSettings;
};

export type PostSettingsNotificationsEmailResponse = NotificationEmailSettings;

export type PostSettingsNotificationsEmailError = unknown;

export type PostSettingsNotificationsEmailTestData = {
    body: NotificationEmailSettings;
};

export type PostSettingsNotificationsEmailTestResponse = void;

export type PostSettingsNotificationsEmailTestError = unknown;

export type GetSettingsNotificationsDiscordResponse = DiscordSettings;

export type GetSettingsNotificationsDiscordError = unknown;

export type PostSettingsNotificationsDiscordData = {
    body: DiscordSettings;
};

export type PostSettingsNotificationsDiscordResponse = DiscordSettings;

export type PostSettingsNotificationsDiscordError = unknown;

export type PostSettingsNotificationsDiscordTestData = {
    body: DiscordSettings;
};

export type PostSettingsNotificationsDiscordTestResponse = void;

export type PostSettingsNotificationsDiscordTestError = unknown;

export type GetSettingsNotificationsLunaseaResponse = LunaSeaSettings;

export type GetSettingsNotificationsLunaseaError = unknown;

export type PostSettingsNotificationsLunaseaData = {
    body: LunaSeaSettings;
};

export type PostSettingsNotificationsLunaseaResponse = LunaSeaSettings;

export type PostSettingsNotificationsLunaseaError = unknown;

export type PostSettingsNotificationsLunaseaTestData = {
    body: LunaSeaSettings;
};

export type PostSettingsNotificationsLunaseaTestResponse = void;

export type PostSettingsNotificationsLunaseaTestError = unknown;

export type GetSettingsNotificationsPushbulletResponse = PushbulletSettings;

export type GetSettingsNotificationsPushbulletError = unknown;

export type PostSettingsNotificationsPushbulletData = {
    body: PushbulletSettings;
};

export type PostSettingsNotificationsPushbulletResponse = PushbulletSettings;

export type PostSettingsNotificationsPushbulletError = unknown;

export type PostSettingsNotificationsPushbulletTestData = {
    body: PushbulletSettings;
};

export type PostSettingsNotificationsPushbulletTestResponse = void;

export type PostSettingsNotificationsPushbulletTestError = unknown;

export type GetSettingsNotificationsPushoverResponse = PushoverSettings;

export type GetSettingsNotificationsPushoverError = unknown;

export type PostSettingsNotificationsPushoverData = {
    body: PushoverSettings;
};

export type PostSettingsNotificationsPushoverResponse = PushoverSettings;

export type PostSettingsNotificationsPushoverError = unknown;

export type PostSettingsNotificationsPushoverTestData = {
    body: PushoverSettings;
};

export type PostSettingsNotificationsPushoverTestResponse = void;

export type PostSettingsNotificationsPushoverTestError = unknown;

export type GetSettingsNotificationsPushoverSoundsData = {
    query: {
        token: string;
    };
};

export type GetSettingsNotificationsPushoverSoundsResponse = Array<{
    name?: string;
    description?: string;
}>;

export type GetSettingsNotificationsPushoverSoundsError = unknown;

export type GetSettingsNotificationsGotifyResponse = GotifySettings;

export type GetSettingsNotificationsGotifyError = unknown;

export type PostSettingsNotificationsGotifyData = {
    body: GotifySettings;
};

export type PostSettingsNotificationsGotifyResponse = GotifySettings;

export type PostSettingsNotificationsGotifyError = unknown;

export type PostSettingsNotificationsGotifyTestData = {
    body: GotifySettings;
};

export type PostSettingsNotificationsGotifyTestResponse = void;

export type PostSettingsNotificationsGotifyTestError = unknown;

export type GetSettingsNotificationsSlackResponse = SlackSettings;

export type GetSettingsNotificationsSlackError = unknown;

export type PostSettingsNotificationsSlackData = {
    body: SlackSettings;
};

export type PostSettingsNotificationsSlackResponse = SlackSettings;

export type PostSettingsNotificationsSlackError = unknown;

export type PostSettingsNotificationsSlackTestData = {
    body: SlackSettings;
};

export type PostSettingsNotificationsSlackTestResponse = void;

export type PostSettingsNotificationsSlackTestError = unknown;

export type GetSettingsNotificationsTelegramResponse = TelegramSettings;

export type GetSettingsNotificationsTelegramError = unknown;

export type PostSettingsNotificationsTelegramData = {
    body: TelegramSettings;
};

export type PostSettingsNotificationsTelegramResponse = TelegramSettings;

export type PostSettingsNotificationsTelegramError = unknown;

export type PostSettingsNotificationsTelegramTestData = {
    body: TelegramSettings;
};

export type PostSettingsNotificationsTelegramTestResponse = void;

export type PostSettingsNotificationsTelegramTestError = unknown;

export type GetSettingsNotificationsWebpushResponse = WebPushSettings;

export type GetSettingsNotificationsWebpushError = unknown;

export type PostSettingsNotificationsWebpushData = {
    body: WebPushSettings;
};

export type PostSettingsNotificationsWebpushResponse = WebPushSettings;

export type PostSettingsNotificationsWebpushError = unknown;

export type PostSettingsNotificationsWebpushTestData = {
    body: WebPushSettings;
};

export type PostSettingsNotificationsWebpushTestResponse = void;

export type PostSettingsNotificationsWebpushTestError = unknown;

export type GetSettingsNotificationsWebhookResponse = WebhookSettings;

export type GetSettingsNotificationsWebhookError = unknown;

export type PostSettingsNotificationsWebhookData = {
    body: WebhookSettings;
};

export type PostSettingsNotificationsWebhookResponse = WebhookSettings;

export type PostSettingsNotificationsWebhookError = unknown;

export type PostSettingsNotificationsWebhookTestData = {
    body: WebhookSettings;
};

export type PostSettingsNotificationsWebhookTestResponse = void;

export type PostSettingsNotificationsWebhookTestError = unknown;

export type GetSettingsDiscoverResponse = Array<DiscoverSlider>;

export type GetSettingsDiscoverError = unknown;

export type PostSettingsDiscoverData = {
    body: Array<DiscoverSlider>;
};

export type PostSettingsDiscoverResponse = Array<DiscoverSlider>;

export type PostSettingsDiscoverError = unknown;

export type PutSettingsDiscoverBySliderIdData = {
    body: {
        title?: string;
        type?: number;
        data?: string;
    };
    path: {
        sliderId: number;
    };
};

export type PutSettingsDiscoverBySliderIdResponse = DiscoverSlider;

export type PutSettingsDiscoverBySliderIdError = unknown;

export type DeleteSettingsDiscoverBySliderIdData = {
    path: {
        sliderId: number;
    };
};

export type DeleteSettingsDiscoverBySliderIdResponse = DiscoverSlider;

export type DeleteSettingsDiscoverBySliderIdError = unknown;

export type PostSettingsDiscoverAddData = {
    body: {
        title?: string;
        type?: number;
        data?: string;
    };
};

export type PostSettingsDiscoverAddResponse = DiscoverSlider;

export type PostSettingsDiscoverAddError = unknown;

export type GetSettingsDiscoverResetResponse = void;

export type GetSettingsDiscoverResetError = unknown;

export type GetSettingsAboutResponse = {
    version?: string;
    totalRequests?: number;
    totalMediaItems?: number;
    tz?: string | null;
    appDataPath?: string;
};

export type GetSettingsAboutError = unknown;

export type GetAuthMeResponse = User;

export type GetAuthMeError = unknown;

export type PostAuthPlexData = {
    body: {
        authToken: string;
    };
};

export type PostAuthPlexResponse = User;

export type PostAuthPlexError = unknown;

export type PostAuthLocalData = {
    body: {
        email: string;
        password: string;
    };
};

export type PostAuthLocalResponse = User;

export type PostAuthLocalError = unknown;

export type PostAuthLogoutResponse = {
    status?: string;
};

export type PostAuthLogoutError = unknown;

export type PostAuthResetPasswordData = {
    body: {
        email: string;
    };
};

export type PostAuthResetPasswordResponse = {
    status?: string;
};

export type PostAuthResetPasswordError = unknown;

export type PostAuthResetPasswordByGuidData = {
    body: {
        password: string;
    };
    path: {
        guid: string;
    };
};

export type PostAuthResetPasswordByGuidResponse = {
    status?: string;
};

export type PostAuthResetPasswordByGuidError = unknown;

export type GetUserData = {
    query?: {
        skip?: number | null;
        sort?: 'created' | 'updated' | 'requests' | 'displayname';
        take?: number | null;
    };
};

export type GetUserResponse = {
    pageInfo?: PageInfo;
    results?: Array<User>;
};

export type GetUserError = unknown;

export type PostUserData = {
    body: {
        email?: string;
        username?: string;
        permissions?: number;
    };
};

export type PostUserResponse = User;

export type PostUserError = unknown;

export type PutUserData = {
    body: {
        ids?: Array<(number)>;
        permissions?: number;
    };
};

export type PutUserResponse = Array<User>;

export type PutUserError = unknown;

export type PostUserImportFromPlexData = {
    body?: {
        plexIds?: Array<(string)>;
    };
};

export type PostUserImportFromPlexResponse = Array<User>;

export type PostUserImportFromPlexError = unknown;

export type PostUserRegisterPushSubscriptionData = {
    body: {
        endpoint: string;
        auth: string;
        p256dh: string;
    };
};

export type PostUserRegisterPushSubscriptionResponse = void;

export type PostUserRegisterPushSubscriptionError = unknown;

export type GetUserByUserIdData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdResponse = User;

export type GetUserByUserIdError = unknown;

export type PutUserByUserIdData = {
    body: User;
    path: {
        userId: number;
    };
};

export type PutUserByUserIdResponse = User;

export type PutUserByUserIdError = unknown;

export type DeleteUserByUserIdData = {
    path: {
        userId: number;
    };
};

export type DeleteUserByUserIdResponse = User;

export type DeleteUserByUserIdError = unknown;

export type GetUserByUserIdRequestsData = {
    path: {
        userId: number;
    };
    query?: {
        skip?: number | null;
        take?: number | null;
    };
};

export type GetUserByUserIdRequestsResponse = {
    pageInfo?: PageInfo;
    results?: Array<MediaRequest>;
};

export type GetUserByUserIdRequestsError = unknown;

export type GetUserByUserIdQuotaData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdQuotaResponse = {
    movie?: {
        days?: number;
        limit?: number;
        used?: number;
        remaining?: number;
        restricted?: boolean;
    };
    tv?: {
        days?: number;
        limit?: number;
        used?: number;
        remaining?: number;
        restricted?: boolean;
    };
};

export type GetUserByUserIdQuotaError = unknown;

export type GetUserByUserIdWatchlistData = {
    path: {
        userId: number;
    };
    query?: {
        page?: number;
    };
};

export type GetUserByUserIdWatchlistResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<{
        tmdbId?: number;
        ratingKey?: string;
        type?: string;
        title?: string;
    }>;
};

export type GetUserByUserIdWatchlistError = unknown;

export type GetUserByUserIdSettingsMainData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdSettingsMainResponse = {
    username?: string;
};

export type GetUserByUserIdSettingsMainError = unknown;

export type PostUserByUserIdSettingsMainData = {
    body: {
        username?: string | null;
    };
    path: {
        userId: number;
    };
};

export type PostUserByUserIdSettingsMainResponse = {
    username?: string;
};

export type PostUserByUserIdSettingsMainError = unknown;

export type GetUserByUserIdSettingsPasswordData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdSettingsPasswordResponse = {
    hasPassword?: boolean;
};

export type GetUserByUserIdSettingsPasswordError = unknown;

export type PostUserByUserIdSettingsPasswordData = {
    body: {
        currentPassword?: string | null;
        newPassword: string;
    };
    path: {
        userId: number;
    };
};

export type PostUserByUserIdSettingsPasswordResponse = void;

export type PostUserByUserIdSettingsPasswordError = unknown;

export type GetUserByUserIdSettingsNotificationsData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdSettingsNotificationsResponse = UserSettingsNotifications;

export type GetUserByUserIdSettingsNotificationsError = unknown;

export type PostUserByUserIdSettingsNotificationsData = {
    body: UserSettingsNotifications;
    path: {
        userId: number;
    };
};

export type PostUserByUserIdSettingsNotificationsResponse = UserSettingsNotifications;

export type PostUserByUserIdSettingsNotificationsError = unknown;

export type GetUserByUserIdSettingsPermissionsData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdSettingsPermissionsResponse = {
    permissions?: number;
};

export type GetUserByUserIdSettingsPermissionsError = unknown;

export type PostUserByUserIdSettingsPermissionsData = {
    body: {
        permissions: number;
    };
    path: {
        userId: number;
    };
};

export type PostUserByUserIdSettingsPermissionsResponse = {
    permissions?: number;
};

export type PostUserByUserIdSettingsPermissionsError = unknown;

export type GetUserByUserIdWatchDataData = {
    path: {
        userId: number;
    };
};

export type GetUserByUserIdWatchDataResponse = {
    recentlyWatched?: Array<MediaInfo>;
    playCount?: number;
};

export type GetUserByUserIdWatchDataError = unknown;

export type GetSearchData = {
    query: {
        language?: string;
        page?: number;
        query: string;
    };
};

export type GetSearchResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<(MovieResult | TvResult | PersonResult)>;
};

export type GetSearchError = unknown;

export type GetSearchKeywordData = {
    query: {
        page?: number;
        query: string;
    };
};

export type GetSearchKeywordResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<Keyword>;
};

export type GetSearchKeywordError = unknown;

export type GetSearchCompanyData = {
    query: {
        page?: number;
        query: string;
    };
};

export type GetSearchCompanyResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<Company>;
};

export type GetSearchCompanyError = unknown;

export type GetDiscoverMoviesData = {
    query?: {
        genre?: string;
        keywords?: string;
        language?: string;
        page?: number;
        primaryReleaseDateGte?: string;
        primaryReleaseDateLte?: string;
        sortBy?: string;
        studio?: number;
        voteAverageGte?: number;
        voteAverageLte?: number;
        voteCountGte?: number;
        voteCountLte?: number;
        watchProviders?: string;
        watchRegion?: string;
        withRuntimeGte?: number;
        withRuntimeLte?: number;
    };
};

export type GetDiscoverMoviesResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<MovieResult>;
};

export type GetDiscoverMoviesError = unknown;

export type GetDiscoverMoviesGenreByGenreIdData = {
    path: {
        genreId: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverMoviesGenreByGenreIdResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    genre?: Genre;
    results?: Array<MovieResult>;
};

export type GetDiscoverMoviesGenreByGenreIdError = unknown;

export type GetDiscoverMoviesLanguageByLanguageData = {
    path: {
        language: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverMoviesLanguageByLanguageResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    language?: SpokenLanguage;
    results?: Array<MovieResult>;
};

export type GetDiscoverMoviesLanguageByLanguageError = unknown;

export type GetDiscoverMoviesStudioByStudioIdData = {
    path: {
        studioId: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverMoviesStudioByStudioIdResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    studio?: ProductionCompany;
    results?: Array<MovieResult>;
};

export type GetDiscoverMoviesStudioByStudioIdError = unknown;

export type GetDiscoverMoviesUpcomingData = {
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverMoviesUpcomingResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<MovieResult>;
};

export type GetDiscoverMoviesUpcomingError = unknown;

export type GetDiscoverTvData = {
    query?: {
        firstAirDateGte?: string;
        firstAirDateLte?: string;
        genre?: string;
        keywords?: string;
        language?: string;
        network?: number;
        page?: number;
        sortBy?: string;
        voteAverageGte?: number;
        voteAverageLte?: number;
        voteCountGte?: number;
        voteCountLte?: number;
        watchProviders?: string;
        watchRegion?: string;
        withRuntimeGte?: number;
        withRuntimeLte?: number;
    };
};

export type GetDiscoverTvResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<TvResult>;
};

export type GetDiscoverTvError = unknown;

export type GetDiscoverTvLanguageByLanguageData = {
    path: {
        language: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverTvLanguageByLanguageResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    language?: SpokenLanguage;
    results?: Array<TvResult>;
};

export type GetDiscoverTvLanguageByLanguageError = unknown;

export type GetDiscoverTvGenreByGenreIdData = {
    path: {
        genreId: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverTvGenreByGenreIdResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    genre?: Genre;
    results?: Array<TvResult>;
};

export type GetDiscoverTvGenreByGenreIdError = unknown;

export type GetDiscoverTvNetworkByNetworkIdData = {
    path: {
        networkId: string;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverTvNetworkByNetworkIdResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    network?: Network;
    results?: Array<TvResult>;
};

export type GetDiscoverTvNetworkByNetworkIdError = unknown;

export type GetDiscoverTvUpcomingData = {
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverTvUpcomingResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<TvResult>;
};

export type GetDiscoverTvUpcomingError = unknown;

export type GetDiscoverTrendingData = {
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverTrendingResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<(MovieResult | TvResult | PersonResult)>;
};

export type GetDiscoverTrendingError = unknown;

export type GetDiscoverKeywordByKeywordIdMoviesData = {
    path: {
        keywordId: number;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetDiscoverKeywordByKeywordIdMoviesResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<MovieResult>;
};

export type GetDiscoverKeywordByKeywordIdMoviesError = unknown;

export type GetDiscoverGenresliderMovieData = {
    query?: {
        language?: string;
    };
};

export type GetDiscoverGenresliderMovieResponse = Array<{
    id?: number;
    backdrops?: Array<(string)>;
    name?: string;
}>;

export type GetDiscoverGenresliderMovieError = unknown;

export type GetDiscoverGenresliderTvData = {
    query?: {
        language?: string;
    };
};

export type GetDiscoverGenresliderTvResponse = Array<{
    id?: number;
    backdrops?: Array<(string)>;
    name?: string;
}>;

export type GetDiscoverGenresliderTvError = unknown;

export type GetDiscoverWatchlistData = {
    query?: {
        page?: number;
    };
};

export type GetDiscoverWatchlistResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<{
        tmdbId?: number;
        ratingKey?: string;
        type?: string;
        title?: string;
    }>;
};

export type GetDiscoverWatchlistError = unknown;

export type GetRequestData = {
    query?: {
        filter?: 'all' | 'approved' | 'available' | 'pending' | 'processing' | 'unavailable' | 'failed' | null;
        requestedBy?: number | null;
        skip?: number | null;
        sort?: 'added' | 'modified';
        take?: number | null;
    };
};

export type GetRequestResponse = {
    pageInfo?: PageInfo;
    results?: Array<MediaRequest>;
};

export type GetRequestError = unknown;

export type PostRequestData = {
    body: {
        mediaType: 'movie' | 'tv';
        mediaId: number;
        tvdbId?: number;
        seasons?: Array<(number)> | 'all';
        is4k?: boolean;
        serverId?: number;
        profileId?: number;
        rootFolder?: string;
        languageProfileId?: number;
        userId?: number | null;
    };
};

export type PostRequestResponse = MediaRequest;

export type PostRequestError = unknown;

export type GetRequestCountResponse = {
    total?: number;
    movie?: number;
    tv?: number;
    pending?: number;
    approved?: number;
    declined?: number;
    processing?: number;
    available?: number;
};

export type GetRequestCountError = unknown;

export type GetRequestByRequestIdData = {
    path: {
        /**
         * Request ID
         */
        requestId: string;
    };
};

export type GetRequestByRequestIdResponse = MediaRequest;

export type GetRequestByRequestIdError = unknown;

export type PutRequestByRequestIdData = {
    body: {
        mediaType: 'movie' | 'tv';
        seasons?: Array<(number)>;
        is4k?: boolean;
        serverId?: number;
        profileId?: number;
        rootFolder?: string;
        languageProfileId?: number;
        userId?: number | null;
    };
    path: {
        /**
         * Request ID
         */
        requestId: string;
    };
};

export type PutRequestByRequestIdResponse = MediaRequest;

export type PutRequestByRequestIdError = unknown;

export type DeleteRequestByRequestIdData = {
    path: {
        /**
         * Request ID
         */
        requestId: string;
    };
};

export type DeleteRequestByRequestIdResponse = void;

export type DeleteRequestByRequestIdError = unknown;

export type PostRequestByRequestIdRetryData = {
    path: {
        /**
         * Request ID
         */
        requestId: string;
    };
};

export type PostRequestByRequestIdRetryResponse = MediaRequest;

export type PostRequestByRequestIdRetryError = unknown;

export type PostRequestByRequestIdByStatusData = {
    path: {
        /**
         * Request ID
         */
        requestId: string;
        /**
         * New status
         */
        status: 'approve' | 'decline';
    };
};

export type PostRequestByRequestIdByStatusResponse = MediaRequest;

export type PostRequestByRequestIdByStatusError = unknown;

export type GetMovieByMovieIdData = {
    path: {
        movieId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetMovieByMovieIdResponse = MovieDetails;

export type GetMovieByMovieIdError = unknown;

export type GetMovieByMovieIdRecommendationsData = {
    path: {
        movieId: number;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetMovieByMovieIdRecommendationsResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<MovieResult>;
};

export type GetMovieByMovieIdRecommendationsError = unknown;

export type GetMovieByMovieIdSimilarData = {
    path: {
        movieId: number;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetMovieByMovieIdSimilarResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<MovieResult>;
};

export type GetMovieByMovieIdSimilarError = unknown;

export type GetMovieByMovieIdRatingsData = {
    path: {
        movieId: number;
    };
};

export type GetMovieByMovieIdRatingsResponse = {
    title?: string;
    year?: number;
    url?: string;
    criticsScore?: number;
    criticsRating?: 'Rotten' | 'Fresh' | 'Certified Fresh';
    audienceScore?: number;
    audienceRating?: 'Spilled' | 'Upright';
};

export type GetMovieByMovieIdRatingsError = unknown;

export type GetMovieByMovieIdRatingscombinedData = {
    path: {
        movieId: number;
    };
};

export type GetMovieByMovieIdRatingscombinedResponse = {
    rt?: {
        title?: string;
        year?: number;
        url?: string;
        criticsScore?: number;
        criticsRating?: 'Rotten' | 'Fresh' | 'Certified Fresh';
        audienceScore?: number;
        audienceRating?: 'Spilled' | 'Upright';
    };
    imdb?: {
        title?: string;
        url?: string;
        criticsScore?: number;
    };
};

export type GetMovieByMovieIdRatingscombinedError = unknown;

export type GetTvByTvIdData = {
    path: {
        tvId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetTvByTvIdResponse = TvDetails;

export type GetTvByTvIdError = unknown;

export type GetTvByTvIdSeasonBySeasonIdData = {
    path: {
        seasonId: number;
        tvId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetTvByTvIdSeasonBySeasonIdResponse = Season;

export type GetTvByTvIdSeasonBySeasonIdError = unknown;

export type GetTvByTvIdRecommendationsData = {
    path: {
        tvId: number;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetTvByTvIdRecommendationsResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<TvResult>;
};

export type GetTvByTvIdRecommendationsError = unknown;

export type GetTvByTvIdSimilarData = {
    path: {
        tvId: number;
    };
    query?: {
        language?: string;
        page?: number;
    };
};

export type GetTvByTvIdSimilarResponse = {
    page?: number;
    totalPages?: number;
    totalResults?: number;
    results?: Array<TvResult>;
};

export type GetTvByTvIdSimilarError = unknown;

export type GetTvByTvIdRatingsData = {
    path: {
        tvId: number;
    };
};

export type GetTvByTvIdRatingsResponse = {
    title?: string;
    year?: number;
    url?: string;
    criticsScore?: number;
    criticsRating?: 'Rotten' | 'Fresh';
};

export type GetTvByTvIdRatingsError = unknown;

export type GetPersonByPersonIdData = {
    path: {
        personId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetPersonByPersonIdResponse = PersonDetails;

export type GetPersonByPersonIdError = unknown;

export type GetPersonByPersonIdCombinedCreditsData = {
    path: {
        personId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetPersonByPersonIdCombinedCreditsResponse = {
    cast?: Array<CreditCast>;
    crew?: Array<CreditCrew>;
    id?: number;
};

export type GetPersonByPersonIdCombinedCreditsError = unknown;

export type GetMediaData = {
    query?: {
        filter?: 'all' | 'available' | 'partial' | 'allavailable' | 'processing' | 'pending' | null;
        skip?: number | null;
        sort?: 'added' | 'modified' | 'mediaAdded';
        take?: number | null;
    };
};

export type GetMediaResponse = {
    pageInfo?: PageInfo;
    results?: Array<MediaInfo>;
};

export type GetMediaError = unknown;

export type DeleteMediaByMediaIdData = {
    path: {
        /**
         * Media ID
         */
        mediaId: string;
    };
};

export type DeleteMediaByMediaIdResponse = void;

export type DeleteMediaByMediaIdError = unknown;

export type PostMediaByMediaIdByStatusData = {
    body?: {
        is4k?: boolean;
    };
    path: {
        /**
         * Media ID
         */
        mediaId: string;
        /**
         * New status
         */
        status: 'available' | 'partial' | 'processing' | 'pending' | 'unknown';
    };
};

export type PostMediaByMediaIdByStatusResponse = MediaInfo;

export type PostMediaByMediaIdByStatusError = unknown;

export type GetMediaByMediaIdWatchDataData = {
    path: {
        /**
         * Media ID
         */
        mediaId: string;
    };
};

export type GetMediaByMediaIdWatchDataResponse = {
    data?: {
        playCount7Days?: number;
        playCount30Days?: number;
        playCount?: number;
        users?: Array<User>;
    };
    data4k?: {
        playCount7Days?: number;
        playCount30Days?: number;
        playCount?: number;
        users?: Array<User>;
    };
};

export type GetMediaByMediaIdWatchDataError = unknown;

export type GetCollectionByCollectionIdData = {
    path: {
        collectionId: number;
    };
    query?: {
        language?: string;
    };
};

export type GetCollectionByCollectionIdResponse = Collection;

export type GetCollectionByCollectionIdError = unknown;

export type GetServiceRadarrResponse = Array<RadarrSettings>;

export type GetServiceRadarrError = unknown;

export type GetServiceRadarrByRadarrIdData = {
    path: {
        radarrId: number;
    };
};

export type GetServiceRadarrByRadarrIdResponse = {
    server?: RadarrSettings;
    profiles?: ServiceProfile;
};

export type GetServiceRadarrByRadarrIdError = unknown;

export type GetServiceSonarrResponse = Array<SonarrSettings>;

export type GetServiceSonarrError = unknown;

export type GetServiceSonarrBySonarrIdData = {
    path: {
        sonarrId: number;
    };
};

export type GetServiceSonarrBySonarrIdResponse = {
    server?: SonarrSettings;
    profiles?: ServiceProfile;
};

export type GetServiceSonarrBySonarrIdError = unknown;

export type GetServiceSonarrLookupByTmdbIdData = {
    path: {
        tmdbId: number;
    };
};

export type GetServiceSonarrLookupByTmdbIdResponse = Array<SonarrSeries>;

export type GetServiceSonarrLookupByTmdbIdError = unknown;

export type GetRegionsResponse = Array<{
    iso_3166_1?: string;
    english_name?: string;
}>;

export type GetRegionsError = unknown;

export type GetLanguagesResponse = Array<{
    iso_639_1?: string;
    english_name?: string;
    name?: string;
}>;

export type GetLanguagesError = unknown;

export type GetStudioByStudioIdData = {
    path: {
        studioId: number;
    };
};

export type GetStudioByStudioIdResponse = ProductionCompany;

export type GetStudioByStudioIdError = unknown;

export type GetNetworkByNetworkIdData = {
    path: {
        networkId: number;
    };
};

export type GetNetworkByNetworkIdResponse = ProductionCompany;

export type GetNetworkByNetworkIdError = unknown;

export type GetGenresMovieData = {
    query?: {
        language?: string;
    };
};

export type GetGenresMovieResponse = Array<{
    id?: number;
    name?: string;
}>;

export type GetGenresMovieError = unknown;

export type GetGenresTvData = {
    query?: {
        language?: string;
    };
};

export type GetGenresTvResponse = Array<{
    id?: number;
    name?: string;
}>;

export type GetGenresTvError = unknown;

export type GetBackdropsResponse = Array<(string)>;

export type GetBackdropsError = unknown;

export type GetIssueData = {
    query?: {
        filter?: 'all' | 'open' | 'resolved';
        requestedBy?: number | null;
        skip?: number | null;
        sort?: 'added' | 'modified';
        take?: number | null;
    };
};

export type GetIssueResponse = {
    pageInfo?: PageInfo;
    results?: Array<Issue>;
};

export type GetIssueError = unknown;

export type PostIssueData = {
    body: {
        issueType?: number;
        message?: string;
        mediaId?: number;
    };
};

export type PostIssueResponse = Issue;

export type PostIssueError = unknown;

export type GetIssueCountResponse = {
    total?: number;
    video?: number;
    audio?: number;
    subtitles?: number;
    others?: number;
    open?: number;
    closed?: number;
};

export type GetIssueCountError = unknown;

export type GetIssueByIssueIdData = {
    path: {
        issueId: number;
    };
};

export type GetIssueByIssueIdResponse = Issue;

export type GetIssueByIssueIdError = unknown;

export type DeleteIssueByIssueIdData = {
    path: {
        /**
         * Issue ID
         */
        issueId: string;
    };
};

export type DeleteIssueByIssueIdResponse = void;

export type DeleteIssueByIssueIdError = unknown;

export type PostIssueByIssueIdCommentData = {
    body: {
        message: string;
    };
    path: {
        issueId: number;
    };
};

export type PostIssueByIssueIdCommentResponse = Issue;

export type PostIssueByIssueIdCommentError = unknown;

export type GetIssueCommentByCommentIdData = {
    path: {
        commentId: string;
    };
};

export type GetIssueCommentByCommentIdResponse = IssueComment;

export type GetIssueCommentByCommentIdError = unknown;

export type PutIssueCommentByCommentIdData = {
    body: {
        message?: string;
    };
    path: {
        commentId: string;
    };
};

export type PutIssueCommentByCommentIdResponse = IssueComment;

export type PutIssueCommentByCommentIdError = unknown;

export type DeleteIssueCommentByCommentIdData = {
    path: {
        /**
         * Issue Comment ID
         */
        commentId: string;
    };
};

export type DeleteIssueCommentByCommentIdResponse = void;

export type DeleteIssueCommentByCommentIdError = unknown;

export type PostIssueByIssueIdByStatusData = {
    path: {
        /**
         * Issue ID
         */
        issueId: string;
        /**
         * New status
         */
        status: 'open' | 'resolved';
    };
};

export type PostIssueByIssueIdByStatusResponse = Issue;

export type PostIssueByIssueIdByStatusError = unknown;

export type GetKeywordByKeywordIdData = {
    path: {
        keywordId: number;
    };
};

export type GetKeywordByKeywordIdResponse = Keyword;

export type GetKeywordByKeywordIdError = unknown;

export type GetWatchprovidersRegionsResponse = Array<WatchProviderRegion>;

export type GetWatchprovidersRegionsError = unknown;

export type GetWatchprovidersMoviesData = {
    query: {
        watchRegion: string;
    };
};

export type GetWatchprovidersMoviesResponse = Array<WatchProviderDetails>;

export type GetWatchprovidersMoviesError = unknown;

export type GetWatchprovidersTvData = {
    query: {
        watchRegion: string;
    };
};

export type GetWatchprovidersTvResponse = Array<WatchProviderDetails>;

export type GetWatchprovidersTvError = unknown;

export type $OpenApiTs = {
    '/status': {
        get: {
            res: {
                /**
                 * Returned status
                 */
                '200': {
                    version?: string;
                    commitTag?: string;
                    updateAvailable?: boolean;
                    commitsBehind?: number;
                    restartRequired?: boolean;
                };
            };
        };
    };
    '/status/appdata': {
        get: {
            res: {
                /**
                 * Application data volume status and path
                 */
                '200': {
                    appData?: boolean;
                    appDataPath?: string;
                };
            };
        };
    };
    '/settings/main': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': MainSettings;
            };
        };
        post: {
            req: PostSettingsMainData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': MainSettings;
            };
        };
    };
    '/settings/main/regenerate': {
        post: {
            res: {
                /**
                 * OK
                 */
                '200': MainSettings;
            };
        };
    };
    '/settings/plex': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': PlexSettings;
            };
        };
        post: {
            req: PostSettingsPlexData;
            res: {
                /**
                 * Values were successfully updated
                 */
                '200': PlexSettings;
            };
        };
    };
    '/settings/plex/library': {
        get: {
            req: GetSettingsPlexLibraryData;
            res: {
                /**
                 * Plex libraries returned
                 */
                '200': Array<PlexLibrary>;
            };
        };
    };
    '/settings/plex/sync': {
        get: {
            res: {
                /**
                 * Status of Plex scan
                 */
                '200': {
                    running?: boolean;
                    progress?: number;
                    total?: number;
                    currentLibrary?: PlexLibrary;
                    libraries?: Array<PlexLibrary>;
                };
            };
        };
        post: {
            req: PostSettingsPlexSyncData;
            res: {
                /**
                 * Status of Plex scan
                 */
                '200': {
                    running?: boolean;
                    progress?: number;
                    total?: number;
                    currentLibrary?: PlexLibrary;
                    libraries?: Array<PlexLibrary>;
                };
            };
        };
    };
    '/settings/plex/devices/servers': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': Array<PlexDevice>;
            };
        };
    };
    '/settings/plex/users': {
        get: {
            res: {
                /**
                 * Plex users
                 */
                '200': Array<{
                    id?: string;
                    title?: string;
                    username?: string;
                    email?: string;
                    thumb?: string;
                }>;
            };
        };
    };
    '/settings/tautulli': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': TautulliSettings;
            };
        };
        post: {
            req: PostSettingsTautulliData;
            res: {
                /**
                 * Values were successfully updated
                 */
                '200': TautulliSettings;
            };
        };
    };
    '/settings/radarr': {
        get: {
            res: {
                /**
                 * Values were returned
                 */
                '200': Array<RadarrSettings>;
            };
        };
        post: {
            req: PostSettingsRadarrData;
            res: {
                /**
                 * New Radarr instance created
                 */
                '201': RadarrSettings;
            };
        };
    };
    '/settings/radarr/test': {
        post: {
            req: PostSettingsRadarrTestData;
            res: {
                /**
                 * Succesfully connected to Radarr instance
                 */
                '200': {
                    profiles?: Array<ServiceProfile>;
                };
            };
        };
    };
    '/settings/radarr/{radarrId}': {
        put: {
            req: PutSettingsRadarrByRadarrIdData;
            res: {
                /**
                 * Radarr instance updated
                 */
                '200': RadarrSettings;
            };
        };
        delete: {
            req: DeleteSettingsRadarrByRadarrIdData;
            res: {
                /**
                 * Radarr instance updated
                 */
                '200': RadarrSettings;
            };
        };
    };
    '/settings/radarr/{radarrId}/profiles': {
        get: {
            req: GetSettingsRadarrByRadarrIdProfilesData;
            res: {
                /**
                 * Returned list of profiles
                 */
                '200': Array<ServiceProfile>;
            };
        };
    };
    '/settings/sonarr': {
        get: {
            res: {
                /**
                 * Values were returned
                 */
                '200': Array<SonarrSettings>;
            };
        };
        post: {
            req: PostSettingsSonarrData;
            res: {
                /**
                 * New Sonarr instance created
                 */
                '201': SonarrSettings;
            };
        };
    };
    '/settings/sonarr/test': {
        post: {
            req: PostSettingsSonarrTestData;
            res: {
                /**
                 * Succesfully connected to Sonarr instance
                 */
                '200': {
                    profiles?: Array<ServiceProfile>;
                };
            };
        };
    };
    '/settings/sonarr/{sonarrId}': {
        put: {
            req: PutSettingsSonarrBySonarrIdData;
            res: {
                /**
                 * Sonarr instance updated
                 */
                '200': SonarrSettings;
            };
        };
        delete: {
            req: DeleteSettingsSonarrBySonarrIdData;
            res: {
                /**
                 * Sonarr instance updated
                 */
                '200': SonarrSettings;
            };
        };
    };
    '/settings/public': {
        get: {
            res: {
                /**
                 * Public settings returned
                 */
                '200': PublicSettings;
            };
        };
    };
    '/settings/initialize': {
        post: {
            res: {
                /**
                 * Public settings returned
                 */
                '200': PublicSettings;
            };
        };
    };
    '/settings/jobs': {
        get: {
            res: {
                /**
                 * Scheduled jobs returned
                 */
                '200': Array<Job>;
            };
        };
    };
    '/settings/jobs/{jobId}/run': {
        post: {
            req: PostSettingsJobsByJobIdRunData;
            res: {
                /**
                 * Invoked job returned
                 */
                '200': Job;
            };
        };
    };
    '/settings/jobs/{jobId}/cancel': {
        post: {
            req: PostSettingsJobsByJobIdCancelData;
            res: {
                /**
                 * Canceled job returned
                 */
                '200': Job;
            };
        };
    };
    '/settings/jobs/{jobId}/schedule': {
        post: {
            req: PostSettingsJobsByJobIdScheduleData;
            res: {
                /**
                 * Rescheduled job
                 */
                '200': Job;
            };
        };
    };
    '/settings/cache': {
        get: {
            res: {
                /**
                 * Caches returned
                 */
                '200': {
                    imageCache?: {
                        tmdb?: {
                            size?: number;
                            imageCount?: number;
                        };
                    };
                    apiCaches?: Array<{
                        id?: string;
                        name?: string;
                        stats?: {
                            hits?: number;
                            misses?: number;
                            keys?: number;
                            ksize?: number;
                            vsize?: number;
                        };
                    }>;
                };
            };
        };
    };
    '/settings/cache/{cacheId}/flush': {
        post: {
            req: PostSettingsCacheByCacheIdFlushData;
            res: {
                /**
                 * Flushed cache
                 */
                '204': void;
            };
        };
    };
    '/settings/logs': {
        get: {
            req: GetSettingsLogsData;
            res: {
                /**
                 * Server log returned
                 */
                '200': Array<{
                    label?: string;
                    level?: string;
                    message?: string;
                    timestamp?: string;
                }>;
            };
        };
    };
    '/settings/notifications/email': {
        get: {
            res: {
                /**
                 * Returned email settings
                 */
                '200': NotificationEmailSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsEmailData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': NotificationEmailSettings;
            };
        };
    };
    '/settings/notifications/email/test': {
        post: {
            req: PostSettingsNotificationsEmailTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/discord': {
        get: {
            res: {
                /**
                 * Returned Discord settings
                 */
                '200': DiscordSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsDiscordData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': DiscordSettings;
            };
        };
    };
    '/settings/notifications/discord/test': {
        post: {
            req: PostSettingsNotificationsDiscordTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/lunasea': {
        get: {
            res: {
                /**
                 * Returned LunaSea settings
                 */
                '200': LunaSeaSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsLunaseaData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': LunaSeaSettings;
            };
        };
    };
    '/settings/notifications/lunasea/test': {
        post: {
            req: PostSettingsNotificationsLunaseaTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/pushbullet': {
        get: {
            res: {
                /**
                 * Returned Pushbullet settings
                 */
                '200': PushbulletSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsPushbulletData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': PushbulletSettings;
            };
        };
    };
    '/settings/notifications/pushbullet/test': {
        post: {
            req: PostSettingsNotificationsPushbulletTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/pushover': {
        get: {
            res: {
                /**
                 * Returned Pushover settings
                 */
                '200': PushoverSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsPushoverData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': PushoverSettings;
            };
        };
    };
    '/settings/notifications/pushover/test': {
        post: {
            req: PostSettingsNotificationsPushoverTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/pushover/sounds': {
        get: {
            req: GetSettingsNotificationsPushoverSoundsData;
            res: {
                /**
                 * Returned Pushover settings
                 */
                '200': Array<{
                    name?: string;
                    description?: string;
                }>;
            };
        };
    };
    '/settings/notifications/gotify': {
        get: {
            res: {
                /**
                 * Returned Gotify settings
                 */
                '200': GotifySettings;
            };
        };
        post: {
            req: PostSettingsNotificationsGotifyData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': GotifySettings;
            };
        };
    };
    '/settings/notifications/gotify/test': {
        post: {
            req: PostSettingsNotificationsGotifyTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/slack': {
        get: {
            res: {
                /**
                 * Returned slack settings
                 */
                '200': SlackSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsSlackData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': SlackSettings;
            };
        };
    };
    '/settings/notifications/slack/test': {
        post: {
            req: PostSettingsNotificationsSlackTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/telegram': {
        get: {
            res: {
                /**
                 * Returned Telegram settings
                 */
                '200': TelegramSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsTelegramData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': TelegramSettings;
            };
        };
    };
    '/settings/notifications/telegram/test': {
        post: {
            req: PostSettingsNotificationsTelegramTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/webpush': {
        get: {
            res: {
                /**
                 * Returned web push settings
                 */
                '200': WebPushSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsWebpushData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': WebPushSettings;
            };
        };
    };
    '/settings/notifications/webpush/test': {
        post: {
            req: PostSettingsNotificationsWebpushTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/notifications/webhook': {
        get: {
            res: {
                /**
                 * Returned webhook settings
                 */
                '200': WebhookSettings;
            };
        };
        post: {
            req: PostSettingsNotificationsWebhookData;
            res: {
                /**
                 * Values were sucessfully updated
                 */
                '200': WebhookSettings;
            };
        };
    };
    '/settings/notifications/webhook/test': {
        post: {
            req: PostSettingsNotificationsWebhookTestData;
            res: {
                /**
                 * Test notification attempted
                 */
                '204': void;
            };
        };
    };
    '/settings/discover': {
        get: {
            res: {
                /**
                 * Returned all discovery sliders
                 */
                '200': Array<DiscoverSlider>;
            };
        };
        post: {
            req: PostSettingsDiscoverData;
            res: {
                /**
                 * Returned all newly updated discovery sliders
                 */
                '200': Array<DiscoverSlider>;
            };
        };
    };
    '/settings/discover/{sliderId}': {
        put: {
            req: PutSettingsDiscoverBySliderIdData;
            res: {
                /**
                 * Returns newly added discovery slider
                 */
                '200': DiscoverSlider;
            };
        };
        delete: {
            req: DeleteSettingsDiscoverBySliderIdData;
            res: {
                /**
                 * Slider successfully deleted
                 */
                '200': DiscoverSlider;
            };
        };
    };
    '/settings/discover/add': {
        post: {
            req: PostSettingsDiscoverAddData;
            res: {
                /**
                 * Returns newly added discovery slider
                 */
                '200': DiscoverSlider;
            };
        };
    };
    '/settings/discover/reset': {
        get: {
            res: {
                /**
                 * All sliders reset to defaults
                 */
                '204': void;
            };
        };
    };
    '/settings/about': {
        get: {
            res: {
                /**
                 * Returned about settings
                 */
                '200': {
                    version?: string;
                    totalRequests?: number;
                    totalMediaItems?: number;
                    tz?: string | null;
                    appDataPath?: string;
                };
            };
        };
    };
    '/auth/me': {
        get: {
            res: {
                /**
                 * Object containing the logged-in user in JSON
                 */
                '200': User;
            };
        };
    };
    '/auth/plex': {
        post: {
            req: PostAuthPlexData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
    };
    '/auth/local': {
        post: {
            req: PostAuthLocalData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
    };
    '/auth/logout': {
        post: {
            res: {
                /**
                 * OK
                 */
                '200': {
                    status?: string;
                };
            };
        };
    };
    '/auth/reset-password': {
        post: {
            req: PostAuthResetPasswordData;
            res: {
                /**
                 * OK
                 */
                '200': {
                    status?: string;
                };
            };
        };
    };
    '/auth/reset-password/{guid}': {
        post: {
            req: PostAuthResetPasswordByGuidData;
            res: {
                /**
                 * OK
                 */
                '200': {
                    status?: string;
                };
            };
        };
    };
    '/user': {
        get: {
            req: GetUserData;
            res: {
                /**
                 * A JSON array of all users
                 */
                '200': {
                    pageInfo?: PageInfo;
                    results?: Array<User>;
                };
            };
        };
        post: {
            req: PostUserData;
            res: {
                /**
                 * The created user
                 */
                '201': User;
            };
        };
        put: {
            req: PutUserData;
            res: {
                /**
                 * Successfully updated user details
                 */
                '200': Array<User>;
            };
        };
    };
    '/user/import-from-plex': {
        post: {
            req: PostUserImportFromPlexData;
            res: {
                /**
                 * A list of the newly created users
                 */
                '201': Array<User>;
            };
        };
    };
    '/user/registerPushSubscription': {
        post: {
            req: PostUserRegisterPushSubscriptionData;
            res: {
                /**
                 * Successfully registered push subscription
                 */
                '204': void;
            };
        };
    };
    '/user/{userId}': {
        get: {
            req: GetUserByUserIdData;
            res: {
                /**
                 * Users details in JSON
                 */
                '200': User;
            };
        };
        put: {
            req: PutUserByUserIdData;
            res: {
                /**
                 * Successfully updated user details
                 */
                '200': User;
            };
        };
        delete: {
            req: DeleteUserByUserIdData;
            res: {
                /**
                 * User successfully deleted
                 */
                '200': User;
            };
        };
    };
    '/user/{userId}/requests': {
        get: {
            req: GetUserByUserIdRequestsData;
            res: {
                /**
                 * User's requests returned
                 */
                '200': {
                    pageInfo?: PageInfo;
                    results?: Array<MediaRequest>;
                };
            };
        };
    };
    '/user/{userId}/quota': {
        get: {
            req: GetUserByUserIdQuotaData;
            res: {
                /**
                 * User quota details in JSON
                 */
                '200': {
                    movie?: {
                        days?: number;
                        limit?: number;
                        used?: number;
                        remaining?: number;
                        restricted?: boolean;
                    };
                    tv?: {
                        days?: number;
                        limit?: number;
                        used?: number;
                        remaining?: number;
                        restricted?: boolean;
                    };
                };
            };
        };
    };
    '/user/{userId}/watchlist': {
        get: {
            req: GetUserByUserIdWatchlistData;
            res: {
                /**
                 * Watchlist data returned
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<{
                        tmdbId?: number;
                        ratingKey?: string;
                        type?: string;
                        title?: string;
                    }>;
                };
            };
        };
    };
    '/user/{userId}/settings/main': {
        get: {
            req: GetUserByUserIdSettingsMainData;
            res: {
                /**
                 * User general settings returned
                 */
                '200': {
                    username?: string;
                };
            };
        };
        post: {
            req: PostUserByUserIdSettingsMainData;
            res: {
                /**
                 * Updated user general settings returned
                 */
                '200': {
                    username?: string;
                };
            };
        };
    };
    '/user/{userId}/settings/password': {
        get: {
            req: GetUserByUserIdSettingsPasswordData;
            res: {
                /**
                 * User password page information returned
                 */
                '200': {
                    hasPassword?: boolean;
                };
            };
        };
        post: {
            req: PostUserByUserIdSettingsPasswordData;
            res: {
                /**
                 * User password updated
                 */
                '204': void;
            };
        };
    };
    '/user/{userId}/settings/notifications': {
        get: {
            req: GetUserByUserIdSettingsNotificationsData;
            res: {
                /**
                 * User notification settings returned
                 */
                '200': UserSettingsNotifications;
            };
        };
        post: {
            req: PostUserByUserIdSettingsNotificationsData;
            res: {
                /**
                 * Updated user notification settings returned
                 */
                '200': UserSettingsNotifications;
            };
        };
    };
    '/user/{userId}/settings/permissions': {
        get: {
            req: GetUserByUserIdSettingsPermissionsData;
            res: {
                /**
                 * User permission settings returned
                 */
                '200': {
                    permissions?: number;
                };
            };
        };
        post: {
            req: PostUserByUserIdSettingsPermissionsData;
            res: {
                /**
                 * Updated user general settings returned
                 */
                '200': {
                    permissions?: number;
                };
            };
        };
    };
    '/user/{userId}/watch_data': {
        get: {
            req: GetUserByUserIdWatchDataData;
            res: {
                /**
                 * Users
                 */
                '200': {
                    recentlyWatched?: Array<MediaInfo>;
                    playCount?: number;
                };
            };
        };
    };
    '/search': {
        get: {
            req: GetSearchData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<(MovieResult | TvResult | PersonResult)>;
                };
            };
        };
    };
    '/search/keyword': {
        get: {
            req: GetSearchKeywordData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<Keyword>;
                };
            };
        };
    };
    '/search/company': {
        get: {
            req: GetSearchCompanyData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<Company>;
                };
            };
        };
    };
    '/discover/movies': {
        get: {
            req: GetDiscoverMoviesData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/movies/genre/{genreId}': {
        get: {
            req: GetDiscoverMoviesGenreByGenreIdData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    genre?: Genre;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/movies/language/{language}': {
        get: {
            req: GetDiscoverMoviesLanguageByLanguageData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    language?: SpokenLanguage;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/movies/studio/{studioId}': {
        get: {
            req: GetDiscoverMoviesStudioByStudioIdData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    studio?: ProductionCompany;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/movies/upcoming': {
        get: {
            req: GetDiscoverMoviesUpcomingData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/tv': {
        get: {
            req: GetDiscoverTvData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/discover/tv/language/{language}': {
        get: {
            req: GetDiscoverTvLanguageByLanguageData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    language?: SpokenLanguage;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/discover/tv/genre/{genreId}': {
        get: {
            req: GetDiscoverTvGenreByGenreIdData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    genre?: Genre;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/discover/tv/network/{networkId}': {
        get: {
            req: GetDiscoverTvNetworkByNetworkIdData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    network?: Network;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/discover/tv/upcoming': {
        get: {
            req: GetDiscoverTvUpcomingData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/discover/trending': {
        get: {
            req: GetDiscoverTrendingData;
            res: {
                /**
                 * Results
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<(MovieResult | TvResult | PersonResult)>;
                };
            };
        };
    };
    '/discover/keyword/{keywordId}/movies': {
        get: {
            req: GetDiscoverKeywordByKeywordIdMoviesData;
            res: {
                /**
                 * List of movies
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/discover/genreslider/movie': {
        get: {
            req: GetDiscoverGenresliderMovieData;
            res: {
                /**
                 * Genre slider data returned
                 */
                '200': Array<{
                    id?: number;
                    backdrops?: Array<(string)>;
                    name?: string;
                }>;
            };
        };
    };
    '/discover/genreslider/tv': {
        get: {
            req: GetDiscoverGenresliderTvData;
            res: {
                /**
                 * Genre slider data returned
                 */
                '200': Array<{
                    id?: number;
                    backdrops?: Array<(string)>;
                    name?: string;
                }>;
            };
        };
    };
    '/discover/watchlist': {
        get: {
            req: GetDiscoverWatchlistData;
            res: {
                /**
                 * Watchlist data returned
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<{
                        tmdbId?: number;
                        ratingKey?: string;
                        type?: string;
                        title?: string;
                    }>;
                };
            };
        };
    };
    '/request': {
        get: {
            req: GetRequestData;
            res: {
                /**
                 * Requests returned
                 */
                '200': {
                    pageInfo?: PageInfo;
                    results?: Array<MediaRequest>;
                };
            };
        };
        post: {
            req: PostRequestData;
            res: {
                /**
                 * Succesfully created the request
                 */
                '201': MediaRequest;
            };
        };
    };
    '/request/count': {
        get: {
            res: {
                /**
                 * Request counts returned
                 */
                '200': {
                    total?: number;
                    movie?: number;
                    tv?: number;
                    pending?: number;
                    approved?: number;
                    declined?: number;
                    processing?: number;
                    available?: number;
                };
            };
        };
    };
    '/request/{requestId}': {
        get: {
            req: GetRequestByRequestIdData;
            res: {
                /**
                 * Succesfully returns request
                 */
                '200': MediaRequest;
            };
        };
        put: {
            req: PutRequestByRequestIdData;
            res: {
                /**
                 * Succesfully updated request
                 */
                '200': MediaRequest;
            };
        };
        delete: {
            req: DeleteRequestByRequestIdData;
            res: {
                /**
                 * Succesfully removed request
                 */
                '204': void;
            };
        };
    };
    '/request/{requestId}/retry': {
        post: {
            req: PostRequestByRequestIdRetryData;
            res: {
                /**
                 * Retry triggered
                 */
                '200': MediaRequest;
            };
        };
    };
    '/request/{requestId}/{status}': {
        post: {
            req: PostRequestByRequestIdByStatusData;
            res: {
                /**
                 * Request status changed
                 */
                '200': MediaRequest;
            };
        };
    };
    '/movie/{movieId}': {
        get: {
            req: GetMovieByMovieIdData;
            res: {
                /**
                 * Movie details
                 */
                '200': MovieDetails;
            };
        };
    };
    '/movie/{movieId}/recommendations': {
        get: {
            req: GetMovieByMovieIdRecommendationsData;
            res: {
                /**
                 * List of movies
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/movie/{movieId}/similar': {
        get: {
            req: GetMovieByMovieIdSimilarData;
            res: {
                /**
                 * List of movies
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<MovieResult>;
                };
            };
        };
    };
    '/movie/{movieId}/ratings': {
        get: {
            req: GetMovieByMovieIdRatingsData;
            res: {
                /**
                 * Ratings returned
                 */
                '200': {
                    title?: string;
                    year?: number;
                    url?: string;
                    criticsScore?: number;
                    criticsRating?: 'Rotten' | 'Fresh' | 'Certified Fresh';
                    audienceScore?: number;
                    audienceRating?: 'Spilled' | 'Upright';
                };
            };
        };
    };
    '/movie/{movieId}/ratingscombined': {
        get: {
            req: GetMovieByMovieIdRatingscombinedData;
            res: {
                /**
                 * Ratings returned
                 */
                '200': {
                    rt?: {
                        title?: string;
                        year?: number;
                        url?: string;
                        criticsScore?: number;
                        criticsRating?: 'Rotten' | 'Fresh' | 'Certified Fresh';
                        audienceScore?: number;
                        audienceRating?: 'Spilled' | 'Upright';
                    };
                    imdb?: {
                        title?: string;
                        url?: string;
                        criticsScore?: number;
                    };
                };
            };
        };
    };
    '/tv/{tvId}': {
        get: {
            req: GetTvByTvIdData;
            res: {
                /**
                 * TV details
                 */
                '200': TvDetails;
            };
        };
    };
    '/tv/{tvId}/season/{seasonId}': {
        get: {
            req: GetTvByTvIdSeasonBySeasonIdData;
            res: {
                /**
                 * TV details
                 */
                '200': Season;
            };
        };
    };
    '/tv/{tvId}/recommendations': {
        get: {
            req: GetTvByTvIdRecommendationsData;
            res: {
                /**
                 * List of TV series
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/tv/{tvId}/similar': {
        get: {
            req: GetTvByTvIdSimilarData;
            res: {
                /**
                 * List of TV series
                 */
                '200': {
                    page?: number;
                    totalPages?: number;
                    totalResults?: number;
                    results?: Array<TvResult>;
                };
            };
        };
    };
    '/tv/{tvId}/ratings': {
        get: {
            req: GetTvByTvIdRatingsData;
            res: {
                /**
                 * Ratings returned
                 */
                '200': {
                    title?: string;
                    year?: number;
                    url?: string;
                    criticsScore?: number;
                    criticsRating?: 'Rotten' | 'Fresh';
                };
            };
        };
    };
    '/person/{personId}': {
        get: {
            req: GetPersonByPersonIdData;
            res: {
                /**
                 * Returned person
                 */
                '200': PersonDetails;
            };
        };
    };
    '/person/{personId}/combined_credits': {
        get: {
            req: GetPersonByPersonIdCombinedCreditsData;
            res: {
                /**
                 * Returned combined credits
                 */
                '200': {
                    cast?: Array<CreditCast>;
                    crew?: Array<CreditCrew>;
                    id?: number;
                };
            };
        };
    };
    '/media': {
        get: {
            req: GetMediaData;
            res: {
                /**
                 * Returned media
                 */
                '200': {
                    pageInfo?: PageInfo;
                    results?: Array<MediaInfo>;
                };
            };
        };
    };
    '/media/{mediaId}': {
        delete: {
            req: DeleteMediaByMediaIdData;
            res: {
                /**
                 * Succesfully removed media item
                 */
                '204': void;
            };
        };
    };
    '/media/{mediaId}/{status}': {
        post: {
            req: PostMediaByMediaIdByStatusData;
            res: {
                /**
                 * Returned media
                 */
                '200': MediaInfo;
            };
        };
    };
    '/media/{mediaId}/watch_data': {
        get: {
            req: GetMediaByMediaIdWatchDataData;
            res: {
                /**
                 * Users
                 */
                '200': {
                    data?: {
                        playCount7Days?: number;
                        playCount30Days?: number;
                        playCount?: number;
                        users?: Array<User>;
                    };
                    data4k?: {
                        playCount7Days?: number;
                        playCount30Days?: number;
                        playCount?: number;
                        users?: Array<User>;
                    };
                };
            };
        };
    };
    '/collection/{collectionId}': {
        get: {
            req: GetCollectionByCollectionIdData;
            res: {
                /**
                 * Collection details
                 */
                '200': Collection;
            };
        };
    };
    '/service/radarr': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': Array<RadarrSettings>;
            };
        };
    };
    '/service/radarr/{radarrId}': {
        get: {
            req: GetServiceRadarrByRadarrIdData;
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    server?: RadarrSettings;
                    profiles?: ServiceProfile;
                };
            };
        };
    };
    '/service/sonarr': {
        get: {
            res: {
                /**
                 * Request successful
                 */
                '200': Array<SonarrSettings>;
            };
        };
    };
    '/service/sonarr/{sonarrId}': {
        get: {
            req: GetServiceSonarrBySonarrIdData;
            res: {
                /**
                 * Request successful
                 */
                '200': {
                    server?: SonarrSettings;
                    profiles?: ServiceProfile;
                };
            };
        };
    };
    '/service/sonarr/lookup/{tmdbId}': {
        get: {
            req: GetServiceSonarrLookupByTmdbIdData;
            res: {
                /**
                 * Request successful
                 */
                '200': Array<SonarrSeries>;
            };
        };
    };
    '/regions': {
        get: {
            res: {
                /**
                 * Results
                 */
                '200': Array<{
                    iso_3166_1?: string;
                    english_name?: string;
                }>;
            };
        };
    };
    '/languages': {
        get: {
            res: {
                /**
                 * Results
                 */
                '200': Array<{
                    iso_639_1?: string;
                    english_name?: string;
                    name?: string;
                }>;
            };
        };
    };
    '/studio/{studioId}': {
        get: {
            req: GetStudioByStudioIdData;
            res: {
                /**
                 * Movie studio details
                 */
                '200': ProductionCompany;
            };
        };
    };
    '/network/{networkId}': {
        get: {
            req: GetNetworkByNetworkIdData;
            res: {
                /**
                 * TV network details
                 */
                '200': ProductionCompany;
            };
        };
    };
    '/genres/movie': {
        get: {
            req: GetGenresMovieData;
            res: {
                /**
                 * Results
                 */
                '200': Array<{
                    id?: number;
                    name?: string;
                }>;
            };
        };
    };
    '/genres/tv': {
        get: {
            req: GetGenresTvData;
            res: {
                /**
                 * Results
                 */
                '200': Array<{
                    id?: number;
                    name?: string;
                }>;
            };
        };
    };
    '/backdrops': {
        get: {
            res: {
                /**
                 * Results
                 */
                '200': Array<(string)>;
            };
        };
    };
    '/issue': {
        get: {
            req: GetIssueData;
            res: {
                /**
                 * Issues returned
                 */
                '200': {
                    pageInfo?: PageInfo;
                    results?: Array<Issue>;
                };
            };
        };
        post: {
            req: PostIssueData;
            res: {
                /**
                 * Succesfully created the issue
                 */
                '201': Issue;
            };
        };
    };
    '/issue/count': {
        get: {
            res: {
                /**
                 * Issue counts returned
                 */
                '200': {
                    total?: number;
                    video?: number;
                    audio?: number;
                    subtitles?: number;
                    others?: number;
                    open?: number;
                    closed?: number;
                };
            };
        };
    };
    '/issue/{issueId}': {
        get: {
            req: GetIssueByIssueIdData;
            res: {
                /**
                 * Issues returned
                 */
                '200': Issue;
            };
        };
        delete: {
            req: DeleteIssueByIssueIdData;
            res: {
                /**
                 * Succesfully removed issue
                 */
                '204': void;
            };
        };
    };
    '/issue/{issueId}/comment': {
        post: {
            req: PostIssueByIssueIdCommentData;
            res: {
                /**
                 * Issue returned with new comment
                 */
                '200': Issue;
            };
        };
    };
    '/issueComment/{commentId}': {
        get: {
            req: GetIssueCommentByCommentIdData;
            res: {
                /**
                 * Comment returned
                 */
                '200': IssueComment;
            };
        };
        put: {
            req: PutIssueCommentByCommentIdData;
            res: {
                /**
                 * Comment updated
                 */
                '200': IssueComment;
            };
        };
        delete: {
            req: DeleteIssueCommentByCommentIdData;
            res: {
                /**
                 * Succesfully removed issue comment
                 */
                '204': void;
            };
        };
    };
    '/issue/{issueId}/{status}': {
        post: {
            req: PostIssueByIssueIdByStatusData;
            res: {
                /**
                 * Issue status changed
                 */
                '200': Issue;
            };
        };
    };
    '/keyword/{keywordId}': {
        get: {
            req: GetKeywordByKeywordIdData;
            res: {
                /**
                 * Keyword returned
                 */
                '200': Keyword;
            };
        };
    };
    '/watchproviders/regions': {
        get: {
            res: {
                /**
                 * Watch provider regions returned
                 */
                '200': Array<WatchProviderRegion>;
            };
        };
    };
    '/watchproviders/movies': {
        get: {
            req: GetWatchprovidersMoviesData;
            res: {
                /**
                 * Watch providers for movies returned
                 */
                '200': Array<WatchProviderDetails>;
            };
        };
    };
    '/watchproviders/tv': {
        get: {
            req: GetWatchprovidersTvData;
            res: {
                /**
                 * Watch providers for series returned
                 */
                '200': Array<WatchProviderDetails>;
            };
        };
    };
};